//// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"terraform-provider-logicmonitor/client"
	"terraform-provider-logicmonitor/client/collector"
	"terraform-provider-logicmonitor/logicmonitor/schemata"
	"terraform-provider-logicmonitor/logicmonitor/utils"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

/*
Collector collector API
*/

func Collector() *schema.Resource {
	return &schema.Resource{
		CreateContext: addCollector,
		DeleteContext: deleteCollectorById,
		ReadContext:   getCollectorById,
		UpdateContext: updateCollectorById,
		Importer: &schema.ResourceImporter{
			State: resourceCollectorStateImporter,
		},
		Schema: schemata.CollectorSchema(),
	}
}

func DataResourceCollector() *schema.Resource {
	return &schema.Resource{
		ReadContext: getCollectorList,
		Schema:      schemata.DataSourceCollectorSchema(),
	}
}

func addCollector(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	model := schemata.CollectorModel(d)
	params := collector.NewAddCollectorParams()
	params.SetBody(model)

	client := m.(*client.LogicMonitorRESTAPI)

	resp, err := client.Collector.AddCollector(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	diags = utils.SetInstallerUrl(d, respModel, client)
	schemata.SetCollectorResourceData(d, respModel)
	d.SetId(strconv.Itoa(int(resp.Payload.ID)))

	if diags != nil {
		deleteCollectorById(ctx, d, m)
	}

	return diags
}

func deleteCollectorById(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := collector.NewDeleteCollectorByIDParams()

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := strconv.Atoi(idVal.(string))
		params.ID = int32(id)
	} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - id")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	}

	client := m.(*client.LogicMonitorRESTAPI)

	resp, err := client.Collector.DeleteCollectorByID(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	d.SetId("")
	return diags
}

func getCollectorById(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := collector.NewGetCollectorByIDParams()

	fieldsVal, fieldsIsSet := d.GetOk("fields")
	if fieldsIsSet {
		params.Fields = fieldsVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := strconv.Atoi(idVal.(string))
		params.ID = int32(id)
	} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - id")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	}

	client := m.(*client.LogicMonitorRESTAPI)

	resp, err := client.Collector.GetCollectorByID(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	schemata.SetCollectorResourceData(d, respModel)
	return diags
}

func getCollectorList(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := collector.NewGetCollectorListParams()

	filterVal, filterIsSet := d.GetOk("filter")
	if filterIsSet {
		stringVal := filterVal.(string)
		params.Filter = &stringVal
	}

	client := m.(*client.LogicMonitorRESTAPI)

	resp, err := client.Collector.GetCollectorList(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	if len(respModel.Items) == 0 {
		diags = append(diags, diag.Errorf("no Collector found")...)
	} else {
		result := respModel.Items[0]
		d.SetId(strconv.Itoa(int(result.ID)))
		schemata.SetCollectorResourceData(d, result)
	}
	return diags
}

func updateCollectorById(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	model := schemata.CollectorModel(d)
	params := collector.NewUpdateCollectorByIDParams()

	params.SetBody(model)

	forceUpdateFailedOverDevicesVal, forceUpdateFailedOverDevicesIsSet := d.GetOk("force_update_failed_over_devices")
	if forceUpdateFailedOverDevicesIsSet {
		params.ForceUpdateFailedOverDevices = forceUpdateFailedOverDevicesVal.(*bool)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := strconv.Atoi(idVal.(string))
		params.ID = int32(id)
	} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - id")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	}

	// list of available properties
	props := schemata.GetCollectorPropertyFields()

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	client := m.(*client.LogicMonitorRESTAPI)

	// makes a bulk update for all properties that were changed
	resp, err := client.Collector.UpdateCollectorByID(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	schemata.SetCollectorResourceData(d, respModel)
	d.Partial(false)

	return diags
}

func resourceCollectorStateImporter(d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
	client := m.(*client.LogicMonitorRESTAPI)

	// if user provides an ID, we will add the collector directly
	if utils.IsID(d.Id()) {
		id, err := strconv.Atoi(d.Id())
		if err != nil {
			return nil, err
		}

		params := collector.NewGetCollectorByIDParams()
		params.SetID(int32(id))

		resp, err := client.Collector.GetCollectorByID(params)
		log.Printf("[TRACE] response: %v", resp)
		if err != nil {
			log.Printf("Failed to find collector %q", err)
			return nil, err
		}

		respModel := resp.GetPayload()
		schemata.SetCollectorResourceData(d, respModel)
	} else {
		return nil, fmt.Errorf("collector must be imported with ID")
	}
	return []*schema.ResourceData{d}, nil
}
