//// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"terraform-provider-logicmonitor/client"
	"terraform-provider-logicmonitor/client/alert_rule"
	"terraform-provider-logicmonitor/logicmonitor/schemata"
	"terraform-provider-logicmonitor/logicmonitor/utils"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

/*
AlertRule alert rule API
*/

func AlertRule() *schema.Resource {
	return &schema.Resource{
		CreateContext: addAlertRule,
		DeleteContext: deleteAlertRuleById,
		ReadContext:   getAlertRuleById,
		UpdateContext: updateAlertRuleById,
		Importer: &schema.ResourceImporter{
			State: resourceAlertRuleStateImporter,
		},
		Schema: schemata.AlertRuleSchema(),
	}
}

func DataResourceAlertRule() *schema.Resource {
	return &schema.Resource{
		ReadContext: getAlertRuleList,
		Schema:      schemata.DataSourceAlertRuleSchema(),
	}
}

func addAlertRule(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	model := schemata.AlertRuleModel(d)
	params := alert_rule.NewAddAlertRuleParams()
	params.SetBody(model)

	client := m.(*client.LogicMonitorRESTAPI)

	resp, err := client.AlertRule.AddAlertRule(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	schemata.SetAlertRuleResourceData(d, respModel)
	d.SetId(strconv.Itoa(int(resp.Payload.ID)))

	return diags
}

func deleteAlertRuleById(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := alert_rule.NewDeleteAlertRuleByIDParams()

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := strconv.Atoi(idVal.(string))
		params.ID = int32(id)
	} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - id")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	}

	client := m.(*client.LogicMonitorRESTAPI)

	resp, err := client.AlertRule.DeleteAlertRuleByID(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	d.SetId("")
	return diags
}

func getAlertRuleById(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := alert_rule.NewGetAlertRuleByIDParams()

	fieldsVal, fieldsIsSet := d.GetOk("fields")
	if fieldsIsSet {
		params.Fields = fieldsVal.(*string)
	}

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := strconv.Atoi(idVal.(string))
		params.ID = int32(id)
	} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - id")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	}

	client := m.(*client.LogicMonitorRESTAPI)

	resp, err := client.AlertRule.GetAlertRuleByID(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	schemata.SetAlertRuleResourceData(d, respModel)
	return diags
}

func getAlertRuleList(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics

	params := alert_rule.NewGetAlertRuleListParams()

	filterVal, filterIsSet := d.GetOk("filter")
	if filterIsSet {
		stringVal := filterVal.(string)
		params.Filter = &stringVal
	}

	client := m.(*client.LogicMonitorRESTAPI)

	resp, err := client.AlertRule.GetAlertRuleList(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	if len(respModel.Items) == 0 {
		diags = append(diags, diag.Errorf("no AlertRule found")...)
	} else {
		result := respModel.Items[0]
		d.SetId(strconv.Itoa(int(result.ID)))
		schemata.SetAlertRuleResourceData(d, result)
	}
	return diags
}

func updateAlertRuleById(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	var diags diag.Diagnostics
	d.Partial(true)

	model := schemata.AlertRuleModel(d)
	params := alert_rule.NewUpdateAlertRuleByIDParams()

	params.SetBody(model)

	idVal, idIsSet := d.GetOk("id")
	if idIsSet {
		id, _ := strconv.Atoi(idVal.(string))
		params.ID = int32(id)
	} else {
		diags = append(diags, diag.Errorf("unexpected: Missing parameter - id")...)
		diags = append(diags, diag.Errorf("ending operation")...)
		return diags
	}

	// list of available properties
	props := schemata.GetAlertRulePropertyFields()

	// loops through array of properties to see which one has changed, the ones that did not change are removed from the list
	for _, v := range props {
		if d.HasChange(v) {
		} else {
			props = utils.Remove(props, v)
		}
	}

	client := m.(*client.LogicMonitorRESTAPI)

	// makes a bulk update for all properties that were changed
	resp, err := client.AlertRule.UpdateAlertRuleByID(params)
	log.Printf("[TRACE] response: %v", resp)
	if err != nil {
		diags = append(diags, diag.Errorf("unexpected: %s", err)...)
		return diags
	}

	respModel := resp.GetPayload()
	schemata.SetAlertRuleResourceData(d, respModel)
	d.Partial(false)

	return diags
}

func resourceAlertRuleStateImporter(d *schema.ResourceData, m interface{}) ([]*schema.ResourceData, error) {
	client := m.(*client.LogicMonitorRESTAPI)

	// if user provides an ID, we will add the alert rule directly
	if utils.IsID(d.Id()) {
		id, err := strconv.Atoi(d.Id())
		if err != nil {
			return nil, err
		}

		params := alert_rule.NewGetAlertRuleByIDParams()
		params.SetID(int32(id))

		resp, err := client.AlertRule.GetAlertRuleByID(params)
		log.Printf("[TRACE] response: %v", resp)
		if err != nil {
			log.Printf("Failed to find alert rule %q", err)
			return nil, err
		}

		respModel := resp.GetPayload()
		schemata.SetAlertRuleResourceData(d, respModel)
	} else {
		// find alert_rule by name
		params := alert_rule.NewGetAlertRuleListParams()
		filter := fmt.Sprintf("name:\"%s\"", d.Id())
		params.SetFilter(&filter)

		resp, err := client.AlertRule.GetAlertRuleList(params)
		log.Printf("[TRACE] response: %v", resp)
		if err != nil {
			err := fmt.Errorf("unexpected: %s", err)
			return nil, err
		}

		if resp.Payload.Total > 1 {
			err := fmt.Errorf("found more than 1 alert rule with filter %s, please make the filter more specific or import with ID", filter)
			return nil, err
		} else if resp.Payload.Total == 1 {
			schemata.SetAlertRuleResourceData(d, resp.Payload.Items[0])
			d.SetId(strconv.Itoa(int(resp.Payload.Items[0].ID)))
		} else {
			err := fmt.Errorf("found no alert rules with filter '%s'", filter)
			return nil, err
		}
	}
	return []*schema.ResourceData{d}, nil
}
