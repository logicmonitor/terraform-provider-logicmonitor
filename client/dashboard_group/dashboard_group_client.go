// Code generated by go-swagger; DO NOT EDIT.

package dashboard_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new dashboard group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for dashboard group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
AddDashboardGroup adds dashboard group
*/
func (a *Client) AddDashboardGroup(params *AddDashboardGroupParams) (*AddDashboardGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDashboardGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDashboardGroup",
		Method:             "POST",
		PathPattern:        "/dashboard/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDashboardGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDashboardGroupOK), nil

}

/*
DeleteDashboardGroupByID deletes dashboard group
*/
func (a *Client) DeleteDashboardGroupByID(params *DeleteDashboardGroupByIDParams) (*DeleteDashboardGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDashboardGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDashboardGroupById",
		Method:             "DELETE",
		PathPattern:        "/dashboard/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDashboardGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDashboardGroupByIDOK), nil

}

/*
GetDashboardGroupByID gets dashboard group
*/
func (a *Client) GetDashboardGroupByID(params *GetDashboardGroupByIDParams) (*GetDashboardGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboardGroupById",
		Method:             "GET",
		PathPattern:        "/dashboard/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDashboardGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardGroupByIDOK), nil

}

/*
GetDashboardGroupList gets dashboard group list
*/
func (a *Client) GetDashboardGroupList(params *GetDashboardGroupListParams) (*GetDashboardGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboardGroupList",
		Method:             "GET",
		PathPattern:        "/dashboard/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDashboardGroupListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardGroupListOK), nil

}

/*
PatchDashboardGroupByID updates dashboard group

The template field works only for the POST API
*/
func (a *Client) PatchDashboardGroupByID(params *PatchDashboardGroupByIDParams) (*PatchDashboardGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDashboardGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDashboardGroupById",
		Method:             "PATCH",
		PathPattern:        "/dashboard/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDashboardGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDashboardGroupByIDOK), nil

}

/*
UpdateDashboardGroupByID updates dashboard group

The template field works only for the POST API
*/
func (a *Client) UpdateDashboardGroupByID(params *UpdateDashboardGroupByIDParams) (*UpdateDashboardGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDashboardGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDashboardGroupById",
		Method:             "PUT",
		PathPattern:        "/dashboard/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDashboardGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDashboardGroupByIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
