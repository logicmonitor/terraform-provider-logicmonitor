// Code generated by go-swagger; DO NOT EDIT.

package website_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new website group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for website group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
AddWebsiteGroup adds website group
*/
func (a *Client) AddWebsiteGroup(params *AddWebsiteGroupParams) (*AddWebsiteGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddWebsiteGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addWebsiteGroup",
		Method:             "POST",
		PathPattern:        "/website/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddWebsiteGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddWebsiteGroupOK), nil

}

/*
DeleteWebsiteGroupByID deletes website group
*/
func (a *Client) DeleteWebsiteGroupByID(params *DeleteWebsiteGroupByIDParams) (*DeleteWebsiteGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebsiteGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWebsiteGroupById",
		Method:             "DELETE",
		PathPattern:        "/website/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebsiteGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWebsiteGroupByIDOK), nil

}

/*
GetWebsiteGroupByID gets website group
*/
func (a *Client) GetWebsiteGroupByID(params *GetWebsiteGroupByIDParams) (*GetWebsiteGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteGroupById",
		Method:             "GET",
		PathPattern:        "/website/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteGroupByIDOK), nil

}

/*
GetWebsiteGroupList gets website group list
*/
func (a *Client) GetWebsiteGroupList(params *GetWebsiteGroupListParams) (*GetWebsiteGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteGroupList",
		Method:             "GET",
		PathPattern:        "/website/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteGroupListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteGroupListOK), nil

}

/*
PatchWebsiteGroupByID updates website group
*/
func (a *Client) PatchWebsiteGroupByID(params *PatchWebsiteGroupByIDParams) (*PatchWebsiteGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWebsiteGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWebsiteGroupById",
		Method:             "PATCH",
		PathPattern:        "/website/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWebsiteGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWebsiteGroupByIDOK), nil

}

/*
UpdateWebsiteGroupByID updates website group
*/
func (a *Client) UpdateWebsiteGroupByID(params *UpdateWebsiteGroupByIDParams) (*UpdateWebsiteGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWebsiteGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWebsiteGroupById",
		Method:             "PUT",
		PathPattern:        "/website/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWebsiteGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateWebsiteGroupByIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
