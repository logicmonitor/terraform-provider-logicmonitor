// Code generated by go-swagger; DO NOT EDIT.

package datasource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"terraform-provider-logicmonitor/common"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"terraform-provider-logicmonitor/models"
)

// NewPatchDatasourceByIDParams creates a new PatchDatasourceByIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchDatasourceByIDParams() *PatchDatasourceByIDParams {
	return &PatchDatasourceByIDParams{
		timeout: common.DefaultTimeout,
	}
}

// NewPatchDatasourceByIDParamsWithTimeout creates a new PatchDatasourceByIDParams object
// with the ability to set a timeout on a request.
func NewPatchDatasourceByIDParamsWithTimeout(timeout time.Duration) *PatchDatasourceByIDParams {
	return &PatchDatasourceByIDParams{
		timeout: timeout,
	}
}

// NewPatchDatasourceByIDParamsWithContext creates a new PatchDatasourceByIDParams object
// with the ability to set a context for a request.
func NewPatchDatasourceByIDParamsWithContext(ctx context.Context) *PatchDatasourceByIDParams {
	return &PatchDatasourceByIDParams{
		Context: ctx,
	}
}

// NewPatchDatasourceByIDParamsWithHTTPClient creates a new PatchDatasourceByIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchDatasourceByIDParamsWithHTTPClient(client *http.Client) *PatchDatasourceByIDParams {
	return &PatchDatasourceByIDParams{
		HTTPClient: client,
	}
}

/*
PatchDatasourceByIDParams contains all the parameters to send to the API endpoint

	for the patch datasource by Id operation.

	Typically these are written to a http.Request.
*/
type PatchDatasourceByIDParams struct {

	// Body.
	Body *models.Datasource

	// ForceRestrictedChangeKey.
	ForceRestrictedChangeKey *string

	// ForceUniqueIdentifier.
	ForceUniqueIdentifier *bool

	// ID.
	//
	// Format: int32
	ID int32

	// Reason.
	Reason *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch datasource by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchDatasourceByIDParams) WithDefaults() *PatchDatasourceByIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch datasource by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchDatasourceByIDParams) SetDefaults() {
	var (
		forceUniqueIdentifierDefault = bool(false)
	)

	val := PatchDatasourceByIDParams{
		ForceUniqueIdentifier: &forceUniqueIdentifierDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) WithTimeout(timeout time.Duration) *PatchDatasourceByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) WithContext(ctx context.Context) *PatchDatasourceByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) WithHTTPClient(client *http.Client) *PatchDatasourceByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) WithBody(body *models.Datasource) *PatchDatasourceByIDParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) SetBody(body *models.Datasource) {
	o.Body = body
}

// WithForceRestrictedChangeKey adds the forceRestrictedChangeKey to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) WithForceRestrictedChangeKey(forceRestrictedChangeKey *string) *PatchDatasourceByIDParams {
	o.SetForceRestrictedChangeKey(forceRestrictedChangeKey)
	return o
}

// SetForceRestrictedChangeKey adds the forceRestrictedChangeKey to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) SetForceRestrictedChangeKey(forceRestrictedChangeKey *string) {
	o.ForceRestrictedChangeKey = forceRestrictedChangeKey
}

// WithForceUniqueIdentifier adds the forceUniqueIdentifier to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) WithForceUniqueIdentifier(forceUniqueIdentifier *bool) *PatchDatasourceByIDParams {
	o.SetForceUniqueIdentifier(forceUniqueIdentifier)
	return o
}

// SetForceUniqueIdentifier adds the forceUniqueIdentifier to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) SetForceUniqueIdentifier(forceUniqueIdentifier *bool) {
	o.ForceUniqueIdentifier = forceUniqueIdentifier
}

// WithID adds the id to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) WithID(id int32) *PatchDatasourceByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) SetID(id int32) {
	o.ID = id
}

// WithReason adds the reason to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) WithReason(reason *string) *PatchDatasourceByIDParams {
	o.SetReason(reason)
	return o
}

// SetReason adds the reason to the patch datasource by Id params
func (o *PatchDatasourceByIDParams) SetReason(reason *string) {
	o.Reason = reason
}

// WriteToRequest writes these params to a swagger request
func (o *PatchDatasourceByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.ForceRestrictedChangeKey != nil {

		// query param forceRestrictedChangeKey
		var qrForceRestrictedChangeKey string

		if o.ForceRestrictedChangeKey != nil {
			qrForceRestrictedChangeKey = *o.ForceRestrictedChangeKey
		}
		qForceRestrictedChangeKey := qrForceRestrictedChangeKey
		if qForceRestrictedChangeKey != "" {

			if err := r.SetQueryParam("forceRestrictedChangeKey", qForceRestrictedChangeKey); err != nil {
				return err
			}
		}
	}

	if o.ForceUniqueIdentifier != nil {

		// query param forceUniqueIdentifier
		var qrForceUniqueIdentifier bool

		if o.ForceUniqueIdentifier != nil {
			qrForceUniqueIdentifier = *o.ForceUniqueIdentifier
		}
		qForceUniqueIdentifier := swag.FormatBool(qrForceUniqueIdentifier)
		if qForceUniqueIdentifier != "" {

			if err := r.SetQueryParam("forceUniqueIdentifier", qForceUniqueIdentifier); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if o.Reason != nil {

		// query param reason
		var qrReason string

		if o.Reason != nil {
			qrReason = *o.Reason
		}
		qReason := qrReason
		if qReason != "" {

			if err := r.SetQueryParam("reason", qReason); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
