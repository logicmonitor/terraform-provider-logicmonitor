// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebCheck web check
//
// swagger:model WebCheck
type WebCheck struct {
	Website

	// The threshold (in days) for triggering SSL certification alerts
	// Example: \u003c 200 100 50
	AlertExpr string `json:"alertExpr,omitempty"`

	// The domain of the service. This is the base URL of the service
	// Example: www.ebay.com
	// Required: true
	Domain *string `json:"domain"`

	// Whether or not SSL should be ignored, the default value is true
	// Example: true
	IgnoreSSL bool `json:"ignoreSSL,omitempty"`

	// The time in milliseconds that the page must load within for each step to avoid triggering an alert
	// Example: 30000
	PageLoadAlertTimeInMS int64 `json:"pageLoadAlertTimeInMS,omitempty"`

	// The scheme or protocol associated with the URL to check. Acceptable values are: http, https
	// Example: https
	Schema string `json:"schema,omitempty"`

	// An object comprising one or more steps, see the table below for the properties included in each step
	Steps []*WebCheckStep `json:"steps"`

	// Whether or not SSL expiration alerts should be triggered
	// Example: false
	TriggerSSLExpirationAlert bool `json:"triggerSSLExpirationAlert,omitempty"`

	// Whether or not SSL status alerts should be triggered
	// Example: false
	TriggerSSLStatusAlert bool `json:"triggerSSLStatusAlert,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WebCheck) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Website
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Website = aO0

	// AO1
	var dataAO1 struct {
		AlertExpr string `json:"alertExpr,omitempty"`

		Domain *string `json:"domain"`

		IgnoreSSL bool `json:"ignoreSSL,omitempty"`

		PageLoadAlertTimeInMS int64 `json:"pageLoadAlertTimeInMS,omitempty"`

		Schema string `json:"schema,omitempty"`

		Steps []*WebCheckStep `json:"steps"`

		TriggerSSLExpirationAlert bool `json:"triggerSSLExpirationAlert,omitempty"`

		TriggerSSLStatusAlert bool `json:"triggerSSLStatusAlert,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AlertExpr = dataAO1.AlertExpr

	m.Domain = dataAO1.Domain

	m.IgnoreSSL = dataAO1.IgnoreSSL

	m.PageLoadAlertTimeInMS = dataAO1.PageLoadAlertTimeInMS

	m.Schema = dataAO1.Schema

	m.Steps = dataAO1.Steps

	m.TriggerSSLExpirationAlert = dataAO1.TriggerSSLExpirationAlert

	m.TriggerSSLStatusAlert = dataAO1.TriggerSSLStatusAlert

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WebCheck) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Website)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		AlertExpr string `json:"alertExpr,omitempty"`

		Domain *string `json:"domain"`

		IgnoreSSL bool `json:"ignoreSSL,omitempty"`

		PageLoadAlertTimeInMS int64 `json:"pageLoadAlertTimeInMS,omitempty"`

		Schema string `json:"schema,omitempty"`

		Steps []*WebCheckStep `json:"steps"`

		TriggerSSLExpirationAlert bool `json:"triggerSSLExpirationAlert,omitempty"`

		TriggerSSLStatusAlert bool `json:"triggerSSLStatusAlert,omitempty"`
	}

	dataAO1.AlertExpr = m.AlertExpr

	dataAO1.Domain = m.Domain

	dataAO1.IgnoreSSL = m.IgnoreSSL

	dataAO1.PageLoadAlertTimeInMS = m.PageLoadAlertTimeInMS

	dataAO1.Schema = m.Schema

	dataAO1.Steps = m.Steps

	dataAO1.TriggerSSLExpirationAlert = m.TriggerSSLExpirationAlert

	dataAO1.TriggerSSLStatusAlert = m.TriggerSSLStatusAlert

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this web check
func (m *WebCheck) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Website
	if err := m.Website.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebCheck) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *WebCheck) validateSteps(formats strfmt.Registry) error {

	if swag.IsZero(m.Steps) { // not required
		return nil
	}

	for i := 0; i < len(m.Steps); i++ {
		if swag.IsZero(m.Steps[i]) { // not required
			continue
		}

		if m.Steps[i] != nil {
			if err := m.Steps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this web check based on the context it is used
func (m *WebCheck) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Website
	if err := m.Website.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSteps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebCheck) contextValidateSteps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Steps); i++ {

		if m.Steps[i] != nil {
			if err := m.Steps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebCheck) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebCheck) UnmarshalBinary(b []byte) error {
	var res WebCheck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
