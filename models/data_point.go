// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataPoint data point
//
// swagger:model DataPoint
type DataPoint struct {

	// The customized alert message body define.  Empty string mean we will use the define in default template
	AlertBody string `json:"alertBody,omitempty"`

	// The count that the alert must exist for this many poll cycles before the alert will be cleared
	AlertClearTransitionInterval int32 `json:"alertClearTransitionInterval,omitempty"`

	// The alert threshold define for the datapoint. e.g. '> 60 80 90' mean it will:
	// trigger warn alert if value > 60
	// trigger error alert if value > 80
	// trigger critical alert if value > 90
	AlertExpr string `json:"alertExpr,omitempty"`

	// alert expression note
	AlertExprNote string `json:"alertExprNote,omitempty"`

	// The triggered alert level if we cannot collect data for this datapoint. The values can be 0-4 (0:unused alert, 1:alert ok, 2:warn alert, 2:error alert, 4:critical alert)
	AlertForNoData int32 `json:"alertForNoData,omitempty"`

	// The customized alert message subject define. Empty string mean we will use the define in default template
	AlertSubject string `json:"alertSubject,omitempty"`

	// The count that the alert must exist for this many poll cycles before it will be triggered
	AlertTransitionInterval int32 `json:"alertTransitionInterval,omitempty"`

	// The data value type. The values can be 1-8 (1:boolean, 2:byte, 3:short, 4:int, 5:long, 6:float, 7:double, 8:ulong)
	DataType int32 `json:"dataType,omitempty"`

	// The datapoint description
	Description string `json:"description,omitempty"`

	// The max digits of the data value
	MaxDigits int32 `json:"maxDigits,omitempty"`

	// The max value of the datapoint value range
	MaxValue string `json:"maxValue,omitempty"`

	// The minimum value of the datapoint value range
	MinValue string `json:"minValue,omitempty"`

	// The datapoint name
	// Required: true
	Name *string `json:"name"`

	// The post processor method for the data value. Currently support complex expression and groovy.
	PostProcessorMethod string `json:"postProcessorMethod,omitempty"`

	// The post processor parameter, e.g. dataPoint1*2
	PostProcessorParam string `json:"postProcessorParam,omitempty"`

	// The name of the raw data field name used to fetch value, e.g. avgrtt, output
	RawDataFieldName string `json:"rawDataFieldName,omitempty"`

	// The data metric type. The values can be 0-7 (0:unknown, 1:counter, 2:gauge, 3:derive, 5:status, 6:compute, 7:counter32, 8:counter64)
	Type int32 `json:"type,omitempty"`
}

// Validate validates this data point
func (m *DataPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataPoint) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this data point based on context it is used
func (m *DataPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataPoint) UnmarshalBinary(b []byte) error {
	var res DataPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
