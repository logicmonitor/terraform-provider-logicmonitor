// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudAccount cloud account
//
// swagger:model CloudAccount
type CloudAccount struct {

	// LogicMonitor's Account ID
	AccountID string `json:"accountId,omitempty"`

	// ARN of the role created for LogicMonitor to use while monitoring AWS
	AssumedRoleArn string `json:"assumedRoleArn,omitempty"`

	// S3 bucket name that houses AWS billing info (deprecated)
	// Read Only: true
	BillingBucketName string `json:"billingBucketName,omitempty"`

	// Path to billing info in billing bucket (deprecated)
	// Read Only: true
	BillingPathPrefix string `json:"billingPathPrefix,omitempty"`

	// client id for azure
	ClientID string `json:"clientId,omitempty"`

	// collectorDescription
	CollectorDescription string `json:"collectorDescription,omitempty"`

	// ID of the collector assigned to this group
	// Read Only: true
	CollectorID int64 `json:"collectorId,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// External ID provide by LM for the creation of the assumed role in AWS
	ExternalID string `json:"externalId,omitempty"`

	// The NetScan schedule for how frequently the cloud collector should scan/discover new resources in the cloud account. It's format is similar to Linux crontab but doesn't support some complex representations ('-', '/', ',') supported in standard linux crontabs.
	// Format: '*(minute) *(hour) *(day) *(week of month) *(weekday)'
	// Examples: '50 * * * *' means scheduling at 50th minute per hour
	// '50 10 20 * *' means scheduling at 10:50 of the 20th day per month
	// '50 10 * 1 3' means scheduling at wednesday of the first week per month
	Schedule string `json:"schedule,omitempty"`

	// secretKey
	SecretKey string `json:"secretKey,omitempty"`

	// subscriptionIds
	SubscriptionIds string `json:"subscriptionIds,omitempty"`

	// tenantId
	TenantID string `json:"tenantId,omitempty"`

	// Type of cloud account
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this cloud account
func (m *CloudAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this cloud account based on the context it is used
func (m *CloudAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBillingBucketName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillingPathPrefix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCollectorID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudAccount) contextValidateBillingBucketName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "billingBucketName", "body", string(m.BillingBucketName)); err != nil {
		return err
	}

	return nil
}

func (m *CloudAccount) contextValidateBillingPathPrefix(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "billingPathPrefix", "body", string(m.BillingPathPrefix)); err != nil {
		return err
	}

	return nil
}

func (m *CloudAccount) contextValidateCollectorID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "collectorId", "body", int64(m.CollectorID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudAccount) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudAccount) UnmarshalBinary(b []byte) error {
	var res CloudAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
