// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PingCheck ping check
//
// swagger:model PingCheck
type PingCheck struct {
	Website

	// The number of packets to send
	Count int32 `json:"count,omitempty"`

	// The percentage of packets that should be returned in the time period specified by timeoutInMSPktsNotReceive for each ping check
	PercentPktsNotReceiveInTime int32 `json:"percentPktsNotReceiveInTime,omitempty"`

	// The time period that the percentage of packets specified by percentPktsNotReceiveInTime must be returned in for each ping check
	TimeoutInMSPktsNotReceive int64 `json:"timeoutInMSPktsNotReceive,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PingCheck) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Website
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Website = aO0

	// AO1
	var dataAO1 struct {
		Count int32 `json:"count,omitempty"`

		PercentPktsNotReceiveInTime int32 `json:"percentPktsNotReceiveInTime,omitempty"`

		TimeoutInMSPktsNotReceive int64 `json:"timeoutInMSPktsNotReceive,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Count = dataAO1.Count

	m.PercentPktsNotReceiveInTime = dataAO1.PercentPktsNotReceiveInTime

	m.TimeoutInMSPktsNotReceive = dataAO1.TimeoutInMSPktsNotReceive

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PingCheck) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Website)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Count int32 `json:"count,omitempty"`

		PercentPktsNotReceiveInTime int32 `json:"percentPktsNotReceiveInTime,omitempty"`

		TimeoutInMSPktsNotReceive int64 `json:"timeoutInMSPktsNotReceive,omitempty"`
	}

	dataAO1.Count = m.Count

	dataAO1.PercentPktsNotReceiveInTime = m.PercentPktsNotReceiveInTime

	dataAO1.TimeoutInMSPktsNotReceive = m.TimeoutInMSPktsNotReceive

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this ping check
func (m *PingCheck) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Website
	if err := m.Website.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this ping check based on the context it is used
func (m *PingCheck) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Website
	if err := m.Website.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *PingCheck) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PingCheck) UnmarshalBinary(b []byte) error {
	var res PingCheck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
