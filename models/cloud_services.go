// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CloudServices cloud services
//
// swagger:model CloudServices
type CloudServices struct {

	// AKSMANAGEDCLUSTER monitoring settings
	AKSMANAGEDCLUSTER *CloudServiceSettings `json:"AKSMANAGEDCLUSTER,omitempty"`

	// ANALYSISSERVICE monitoring settings
	ANALYSISSERVICE *CloudServiceSettings `json:"ANALYSISSERVICE,omitempty"`

	// APIGATEWAY monitoring settings
	APIGATEWAY *CloudServiceSettings `json:"APIGATEWAY,omitempty"`

	// API Management
	APIMANAGEMENT *CloudServiceSettings `json:"APIMANAGEMENT,omitempty"`

	// APPLICATIONELB monitoring settings
	APPLICATIONELB *CloudServiceSettings `json:"APPLICATIONELB,omitempty"`

	// Application Gateway
	APPLICATIONGATEWAY *CloudServiceSettings `json:"APPLICATIONGATEWAY,omitempty"`

	// Application insights
	APPLICATIONINSIGHTS *CloudServiceSettings `json:"APPLICATIONINSIGHTS,omitempty"`

	// App Service
	APPSERVICE *CloudServiceSettings `json:"APPSERVICE,omitempty"`
	
	// App Service Environment
	APPSERVICEENVIRONMENT *CloudServiceSettings `json:"APPSERVICEENVIRONMENT,omitempty"`

	// App Service plan
	APPSERVICEPLAN *CloudServiceSettings `json:"APPSERVICEPLAN,omitempty"`

	// APPSTREAM monitoring settings
	APPSTREAM *CloudServiceSettings `json:"APPSTREAM,omitempty"`

	// ATHENA monitoring settings
	ATHENA *CloudServiceSettings `json:"ATHENA,omitempty"`

	// Automation Account
	AUTOMATIONACCOUNT *CloudServiceSettings `json:"AUTOMATIONACCOUNT,omitempty"`

	// AUTOSCALING monitoring settings
	AUTOSCALING *CloudServiceSettings `json:"AUTOSCALING,omitempty"`

	// Backup protected items
	BACKUPPROTECTEDITEMS *CloudServiceSettings `json:"BACKUPPROTECTEDITEMS,omitempty"`

	// BATCHACCOUNT monitoring settings
	BATCHACCOUNT *CloudServiceSettings `json:"BATCHACCOUNT,omitempty"`

	// Blob storage
	BLOBSTORAGE *CloudServiceSettings `json:"BLOBSTORAGE,omitempty"`

	// BOTSERVICES monitoring settings
	BOTSERVICES *CloudServiceSettings `json:"BOTSERVICES,omitempty"`

	// CDNPROFILE monitoring settings
	CDNPROFILE *CloudServiceSettings `json:"CDNPROFILE,omitempty"`

	// CLOUDFRONT monitoring settings
	CLOUDFRONT *CloudServiceSettings `json:"CLOUDFRONT,omitempty"`

	// CLOUDSEARCH monitoring settings
	CLOUDSEARCH *CloudServiceSettings `json:"CLOUDSEARCH,omitempty"`

	// CODEBUILD monitoring settings
	CODEBUILD *CloudServiceSettings `json:"CODEBUILD,omitempty"`

	// CognitiveSearch
	COGNITIVESEARCH *CloudServiceSettings `json:"COGNITIVESEARCH,omitempty"`

	// Cognitive Services
	COGNITIVESERVICES *CloudServiceSettings `json:"COGNITIVESERVICES,omitempty"`

	// COGNITO monitoring settings
	COGNITO *CloudServiceSettings `json:"COGNITO,omitempty"`

	// CONTAINERREGISTRY monitoring settings
	CONTAINERREGISTRY *CloudServiceSettings `json:"CONTAINERREGISTRY,omitempty"`

	// CosmosDB
	COSMOSDB *CloudServiceSettings `json:"COSMOSDB,omitempty"`

	// DATABRICKS monitoring settings
	DATABRICKS *CloudServiceSettings `json:"DATABRICKS,omitempty"`

	// Data Factory
	DATAFACTORY *CloudServiceSettings `json:"DATAFACTORY,omitempty"`

	// DATALAKEANALYTICS monitoring settings
	DATALAKEANALYTICS *CloudServiceSettings `json:"DATALAKEANALYTICS,omitempty"`

	// DATALAKESTORE monitoring settings
	DATALAKESTORE *CloudServiceSettings `json:"DATALAKESTORE,omitempty"`

	// DIRECTCONNECT monitoring settings
	DIRECTCONNECT *CloudServiceSettings `json:"DIRECTCONNECT,omitempty"`

	// DISKS monitoring settings 
	DISKS *CloudServiceSettings `json:"DISKS,omitempty"` 

	// DMSREPLICATION monitoring settings
	DMSREPLICATION *CloudServiceSettings `json:"DMSREPLICATION,omitempty"`

	// DMSREPLICATIONTASKS monitoring settings
	DMSREPLICATIONTASKS *CloudServiceSettings `json:"DMSREPLICATIONTASKS,omitempty"`

	// DOCDB monitoring settings
	DOCDB *CloudServiceSettings `json:"DOCDB,omitempty"`

	// DYNAMODB monitoring settings
	DYNAMODB *CloudServiceSettings `json:"DYNAMODB,omitempty"`

	// EBS monitoring settings
	EBS *CloudServiceSettings `json:"EBS,omitempty"`

	// EC2 monitoring settings
	EC2 *CloudServiceSettings `json:"EC2,omitempty"`

	// ECS monitoring settings
	ECS *CloudServiceSettings `json:"ECS,omitempty"`

	// EFS monitoring settings
	EFS *CloudServiceSettings `json:"EFS,omitempty"`

	// ELASTICACHE monitoring settings
	ELASTICACHE *CloudServiceSettings `json:"ELASTICACHE,omitempty"`

	// ELASTICBEANSTALK monitoring settings
	ELASTICBEANSTALK *CloudServiceSettings `json:"ELASTICBEANSTALK,omitempty"`

	// ELASTICSEARCH monitoring settings
	ELASTICSEARCH *CloudServiceSettings `json:"ELASTICSEARCH,omitempty"`

	// ELASTICTRANSCODER monitoring settings
	ELASTICTRANSCODER *CloudServiceSettings `json:"ELASTICTRANSCODER,omitempty"`

	// ELB monitoring settings
	ELB *CloudServiceSettings `json:"ELB,omitempty"`

	// EMR monitoring settings
	EMR *CloudServiceSettings `json:"EMR,omitempty"`

	// EVENTBRIDGE monitoring settings
	EVENTBRIDGE *CloudServiceSettings `json:"EVENTBRIDGE,omitempty"`

	// EVENTGRID monitoring settings
	EVENTGRID *CloudServiceSettings `json:"EVENTGRID,omitempty"`

	// Event Hub
	EVENTHUB *CloudServiceSettings `json:"EVENTHUB,omitempty"`

	// Express Route Circuit
	EXPRESSROUTECIRCUIT *CloudServiceSettings `json:"EXPRESSROUTECIRCUIT,omitempty"`

	// File storage
	FILESTORAGE *CloudServiceSettings `json:"FILESTORAGE,omitempty"`

	// FIREHOSE monitoring settings
	FIREHOSE *CloudServiceSettings `json:"FIREHOSE,omitempty"`

	// Firewall
	FIREWALL *CloudServiceSettings `json:"FIREWALL,omitempty"`

	// Front Doors
	FRONTDOORS *CloudServiceSettings `json:"FRONTDOORS,omitempty"`

	// FSX monitoring settings
	FSX *CloudServiceSettings `json:"FSX,omitempty"`

	// FUNCTIONAPP monitoring settings
	FUNCTIONAPP *CloudServiceSettings `json:"FUNCTION,omitempty"`

	// GLUE monitoring settings
	GLUE *CloudServiceSettings `json:"GLUE,omitempty"`

	// HDINSIGHT monitoring settings
	HDINSIGHT *CloudServiceSettings `json:"HDINSIGHT,omitempty"`

	// IOTHUB monitoring settings
	IOTHUB *CloudServiceSettings `json:"IOTHUB,omitempty"`

	// Key vault
	KEYVAULT *CloudServiceSettings `json:"KEYVAULT,omitempty"`

	// KINESIS monitoring settings
	KINESIS *CloudServiceSettings `json:"KINESIS,omitempty"`

	// KINESISVIDEO monitoring settings
	KINESISVIDEO *CloudServiceSettings `json:"KINESISVIDEO,omitempty"`

	// LAMBDA monitoring settings
	LAMBDA *CloudServiceSettings `json:"LAMBDA,omitempty"`

	// Load balancers
	LOADBALANCERS *CloudServiceSettings `json:"LOADBALANCERS,omitempty"`

	// Log Analytics Workspaces
	LOGANALYTICSWORKSPACES *CloudServiceSettings `json:"LOGANALYTICSWORKSPACES,omitempty"`

	// Logic Apps
	LOGICAPPS *CloudServiceSettings `json:"LOGICAPPS,omitempty"`

	// MARIADB monitoring settings
	MARIADB *CloudServiceSettings `json:"MARIADB,omitempty"`

	// MEDIACONNECT monitoring settings
	MEDIACONNECT *CloudServiceSettings `json:"MEDIACONNECT,omitempty"`

	// MEDIACONVERT monitoring settings
	MEDIACONVERT *CloudServiceSettings `json:"MEDIACONVERT,omitempty"`

	// MEDIAPACKAGELIVE monitoring settings
	MEDIAPACKAGELIVE *CloudServiceSettings `json:"MEDIAPACKAGELIVE,omitempty"`

	// MEDIAPACKAGEVOD monitoring settings
	MEDIAPACKAGEVOD *CloudServiceSettings `json:"MEDIAPACKAGEVOD,omitempty"`

	// MEDIASTORE monitoring settings
	MEDIASTORE *CloudServiceSettings `json:"MEDIASTORE,omitempty"`

	// MEDIATAILOR monitoring settings
	MEDIATAILOR *CloudServiceSettings `json:"MEDIATAILOR,omitempty"`

	// MLWORKSPACES monitoring settings
	MLWORKSPACES *CloudServiceSettings `json:"MLWORKSPACES,omitempty"`

	// MQ monitoring settings
	MQ *CloudServiceSettings `json:"MQ,omitempty"`

	// MSKBROKER monitoring settings
	MSKBROKER *CloudServiceSettings `json:"MSKBROKER,omitempty"`

	// MSKCLUSTER monitoring settings
	MSKCLUSTER *CloudServiceSettings `json:"MSKCLUSTER,omitempty"`

	// My sql
	MYSQL *CloudServiceSettings `json:"MYSQL,omitempty"`

	// My sql flexible server
	MYSQLFLEXIBLE *CloudServiceSettings `json:"MYSQLFLEXIBLE,omitempty"`

	// NATGATEWAY monitoring settings
	NATGATEWAY *CloudServiceSettings `json:"NATGATEWAY,omitempty"`

	// NATGATEWAYS monitoring settings
	NATGATEWAYS *CloudServiceSettings `json:"NATGATEWAYS,omitempty"`

	// NETAPPPOOLS monitoring settings
	NETAPPPOOLS *CloudServiceSettings `json:"NETAPPPOOLS,omitempty"`

	// NETWORKELB monitoring settings
	NETWORKELB *CloudServiceSettings `json:"NETWORKELB,omitempty"`

	// Network interface
	NETWORKINTERFACE *CloudServiceSettings `json:"NETWORKINTERFACE,omitempty"`

	// NOTIFICATIONHUBS interface
	NOTIFICATIONHUBS *CloudServiceSettings `json:"NOTIFICATIONHUBS,omitempty"`

	// OPSWORKS monitoring settings
	OPSWORKS *CloudServiceSettings `json:"OPSWORKS,omitempty"`

	// PostgreSQL
	POSTGRESQL *CloudServiceSettings `json:"POSTGRESQL,omitempty"`

	// PostgreSQLCitus	monitoring settings
	POSTGRESQLCITUS *CloudServiceSettings `json:"POSTGRESQLCITUS,omitempty"`

	// POSTGRESQLFLEXIBLE monitoring settings
	POSTGRESQLFLEXIBLE *CloudServiceSettings `json:"POSTGRESQLFLEXIBLE,omitempty"`

	// POWERBIEMBEDDED monitoring settings
	POWERBIEMBEDDED *CloudServiceSettings `json:"POWERBIEMBEDDED,omitempty"`

	// Public IP
	PUBLICIP *CloudServiceSettings `json:"PUBLICIP,omitempty"`

	// Queue storage
	QUEUESTORAGE *CloudServiceSettings `json:"QUEUESTORAGE,omitempty"`

	// RDS monitoring settings
	RDS *CloudServiceSettings `json:"RDS,omitempty"`

	// Recovery Protected Item
	RECOVERYPROTECTEDITEM *CloudServiceSettings `json:"RECOVERYPROTECTEDITEM,omitempty"`

	// Recovery Protected Item
	RECOVERYPROTECTEDITEMS *CloudServiceSettings `json:"RECOVERYPROTECTEDITEMS,omitempty"`

	// Recovery Services
	RECOVERYSERVICES *CloudServiceSettings `json:"RECOVERYSERVICES,omitempty"`

	// Redis Cache
	REDISCACHE *CloudServiceSettings `json:"REDISCACHE,omitempty"`

	// REDISCACHEENTERPRISE monitoring settings
	REDISCACHEENTERPRISE *CloudServiceSettings `json:"REDISCACHEENTERPRISE,omitempty"`

	// REDSHIFT monitoring settings
	REDSHIFT *CloudServiceSettings `json:"REDSHIFT,omitempty"`

	// RELAYNAMESPACES monitoring settings
	RELAYNAMESPACES *CloudServiceSettings `json:"RELAYNAMESPACES,omitempty"`

	// ROUTE53 monitoring settings
	ROUTE53 *CloudServiceSettings `json:"ROUTE53,omitempty"`

	// ROUTE53RESOLVER monitoring settings
	ROUTE53RESOLVER *CloudServiceSettings `json:"ROUTE53RESOLVER,omitempty"`

	// S3 monitoring settings
	S3 *CloudServiceSettings `json:"S3,omitempty"`

	// SAGEMAKER monitoring settings
	SAGEMAKER *CloudServiceSettings `json:"SAGEMAKER,omitempty"`

	// Service Bus
	SERVICEBUS *CloudServiceSettings `json:"SERVICEBUS,omitempty"`

	// SERVICEFABRICMESH monitoring settings
	SERVICEFABRICMESH *CloudServiceSettings `json:"SERVICEFABRICMESH,omitempty"`

	// SES monitoring settings
	SES *CloudServiceSettings `json:"SES,omitempty"`

	// SIGNALR monitoring settings
	SIGNALR *CloudServiceSettings `json:"SIGNALR,omitempty"`

	// SNS monitoring settings
	SNS *CloudServiceSettings `json:"SNS,omitempty"`

	// SQL database
	SQLDATABASE *CloudServiceSettings `json:"SQLDATABASE,omitempty"`

	// SQL ElasticPool
	SQLELASTICPOOL *CloudServiceSettings `json:"SQLELASTICPOOL,omitempty"`

	// SQL Managed Instance
	SQLMANAGEDINSTANCE *CloudServiceSettings `json:"SQLMANAGEDINSTANCE,omitempty"`

	// SQS monitoring settings
	SQS *CloudServiceSettings `json:"SQS,omitempty"`

	// STEPFUNCTIONS monitoring settings
	STEPFUNCTIONS *CloudServiceSettings `json:"STEPFUNCTIONS,omitempty"`

	// Storage account
	STORAGEACCOUNT *CloudServiceSettings `json:"STORAGEACCOUNT,omitempty"`

	// STREAMANALYTICS monitoring settings
	STREAMANALYTICS *CloudServiceSettings `json:"STREAMANALYTICS,omitempty"`

	// SWFACTIVITY monitoring settings
	SWFACTIVITY *CloudServiceSettings `json:"SWFACTIVITY,omitempty"`

	// SWFWORKFLOW monitoring settings
	SWFWORKFLOW *CloudServiceSettings `json:"SWFWORKFLOW,omitempty"`

	// SynapseWorkSpaces
	SYNAPSEWORKSPACES *CloudServiceSettings `json:"SYNAPSEWORKSPACES,omitempty"`

	// Table storage
	TABLESTORAGE *CloudServiceSettings `json:"TABLESTORAGE,omitempty"`

	// TRAFFICMANAGER
	TRAFFICMANAGER *CloudServiceSettings `json:"TRAFFICMANAGER,omitempty"`

	// TRANSITGATEWAY monitoring settings
	TRANSITGATEWAY *CloudServiceSettings `json:"TRANSITGATEWAY,omitempty"`

	// Virtual Desktop
	VIRTUALDESKTOP *CloudServiceSettings `json:"VIRTUALDESKTOP,omitempty"`

	// VIRTUALHUBS monitoring settings
	VIRTUALHUBS *CloudServiceSettings `json:"VIRTUALHUBS,omitempty"`

	// VIRTUAL machine
	VIRTUALMACHINE *CloudServiceSettings `json:"VIRTUALMACHINE,omitempty"`

	// Virtual Machine Scale Set
	VIRTUALMACHINESCALESET *CloudServiceSettings `json:"VIRTUALMACHINESCALESET,omitempty"`

	// Virtual machine scale set VM
	VIRTUALMACHINESCALESETVM *CloudServiceSettings `json:"VIRTUALMACHINESCALESETVM,omitempty"`

	// Virtual Network Gateway
	VIRTUALNETWORKGATEWAY *CloudServiceSettings `json:"VIRTUALNETWORKGATEWAY,omitempty"`

	// VIRTUALNETWORKS monitoring settings
	VIRTUALNETWORKS *CloudServiceSettings `json:"VIRTUALNETWORKS,omitempty"`

	// VPN monitoring settings
	VPN *CloudServiceSettings `json:"VPN,omitempty"`

	// VPNGATEWAYS monitoring settings
	VPNGATEWAYS *CloudServiceSettings `json:"VPNGATEWAYS,omitempty"`

	// WORKSPACE monitoring settings
	WORKSPACE *CloudServiceSettings `json:"WORKSPACE,omitempty"`

	// WORKSPACEDIRECTORY monitoring settings
	WORKSPACEDIRECTORY *CloudServiceSettings `json:"WORKSPACEDIRECTORY,omitempty"`
}

// Validate validates this cloud services
func (m *CloudServices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAKSMANAGEDCLUSTER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateANALYSISSERVICE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIGATEWAY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIMANAGEMENT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPPLICATIONELB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPPLICATIONGATEWAY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPPLICATIONINSIGHTS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPPSERVICE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPPSERVICEENVIRONMENT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPPSERVICEPLAN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPPSTREAM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateATHENA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAUTOMATIONACCOUNT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAUTOSCALING(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBATCHACCOUNT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBACKUPPROTECTEDITEMS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBLOBSTORAGE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBOTSERVICES(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCDNPROFILE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCLOUDFRONT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCLOUDSEARCH(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCODEBUILD(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCOGNITIVESEARCH(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCOGNITIVESERVICES(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCOGNITO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCONTAINERREGISTRY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCOSMOSDB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDATABRICKS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDATAFACTORY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDATALAKEANALYTICS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDATALAKESTORE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDIRECTCONNECT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDISKS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDMSREPLICATION(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDMSREPLICATIONTASKS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDOCDB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDYNAMODB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEBS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEC2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateECS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEFS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateELASTICACHE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateELASTICBEANSTALK(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateELASTICSEARCH(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateELASTICTRANSCODER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateELB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEMR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEVENTBRIDGE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEVENTGRID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEVENTHUB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEXPRESSROUTECIRCUIT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFILESTORAGE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFIREHOSE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFIREWALL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFRONTDOORS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFSX(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFUNCTIONAPP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGLUE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHDINSIGHT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIOTHUB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKEYVAULT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKINESIS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKINESISVIDEO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLAMBDA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLOADBALANCERS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLOGANALYTICSWORKSPACES(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLOGICAPPS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMARIADB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMEDIACONNECT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMEDIACONVERT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMEDIAPACKAGELIVE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMEDIAPACKAGEVOD(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMEDIASTORE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMEDIATAILOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMLWORKSPACES(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMQ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMSKBROKER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMSKCLUSTER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMYSQL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMYSQLFLEXIBLE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNATGATEWAY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNATGATEWAYS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNETAPPPOOLS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNETWORKELB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNETWORKINTERFACE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOTIFICATIONHUBS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOPSWORKS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePOSTGRESQL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePOSTGRESQLCITUS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePOSTGRESQLFLEXIBLE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePOWERBIEMBEDDED(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePUBLICIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQUEUESTORAGE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRDS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRECOVERYPROTECTEDITEM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRECOVERYPROTECTEDITEMS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRECOVERYSERVICES(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateREDISCACHE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateREDISCACHEENTERPRISE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateREDSHIFT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRELAYNAMESPACES(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateROUTE53(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateROUTE53RESOLVER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSAGEMAKER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSERVICEBUS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSERVICEFABRICMESH(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSES(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSIGNALR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLDATABASE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLELASTICPOOL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLMANAGEDINSTANCE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSTEPFUNCTIONS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSTORAGEACCOUNT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSTREAMANALYTICS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSWFACTIVITY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSWFWORKFLOW(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSYNAPSEWORKSPACES(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTABLESTORAGE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTRAFFICMANAGER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTRANSITGATEWAY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVIRTUALDESKTOP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVIRTUALHUBS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVIRTUALMACHINE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVIRTUALMACHINESCALESET(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVIRTUALMACHINESCALESETVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVIRTUALNETWORKGATEWAY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVIRTUALNETWORKS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVPN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVPNGATEWAYS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWORKSPACE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWORKSPACEDIRECTORY(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudServices) validateAKSMANAGEDCLUSTER(formats strfmt.Registry) error {
	if swag.IsZero(m.AKSMANAGEDCLUSTER) { // not required
		return nil
	}

	if m.AKSMANAGEDCLUSTER != nil {
		if err := m.AKSMANAGEDCLUSTER.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AKSMANAGEDCLUSTER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AKSMANAGEDCLUSTER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateANALYSISSERVICE(formats strfmt.Registry) error {
	if swag.IsZero(m.ANALYSISSERVICE) { // not required
		return nil
	}

	if m.ANALYSISSERVICE != nil {
		if err := m.ANALYSISSERVICE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ANALYSISSERVICE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ANALYSISSERVICE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAPIGATEWAY(formats strfmt.Registry) error {
	if swag.IsZero(m.APIGATEWAY) { // not required
		return nil
	}

	if m.APIGATEWAY != nil {
		if err := m.APIGATEWAY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APIGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APIGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAPIMANAGEMENT(formats strfmt.Registry) error {
	if swag.IsZero(m.APIMANAGEMENT) { // not required
		return nil
	}

	if m.APIMANAGEMENT != nil {
		if err := m.APIMANAGEMENT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APIMANAGEMENT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APIMANAGEMENT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAPPLICATIONELB(formats strfmt.Registry) error {
	if swag.IsZero(m.APPLICATIONELB) { // not required
		return nil
	}

	if m.APPLICATIONELB != nil {
		if err := m.APPLICATIONELB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPLICATIONELB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPLICATIONELB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAPPLICATIONGATEWAY(formats strfmt.Registry) error {
	if swag.IsZero(m.APPLICATIONGATEWAY) { // not required
		return nil
	}

	if m.APPLICATIONGATEWAY != nil {
		if err := m.APPLICATIONGATEWAY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPLICATIONGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPLICATIONGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAPPLICATIONINSIGHTS(formats strfmt.Registry) error {
	if swag.IsZero(m.APPLICATIONINSIGHTS) { // not required
		return nil
	}

	if m.APPLICATIONINSIGHTS != nil {
		if err := m.APPLICATIONINSIGHTS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPLICATIONINSIGHTS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPLICATIONINSIGHTS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAPPSERVICE(formats strfmt.Registry) error {
	if swag.IsZero(m.APPSERVICE) { // not required
		return nil
	}

	if m.APPSERVICE != nil {
		if err := m.APPSERVICE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPSERVICE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPSERVICE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAPPSERVICEENVIRONMENT(formats strfmt.Registry) error {
	if swag.IsZero(m.APPSERVICEENVIRONMENT) { // not required
		return nil
	}

	if m.APPSERVICEENVIRONMENT != nil {
		if err := m.APPSERVICEENVIRONMENT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPSERVICEENVIRONMENT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPSERVICEENVIRONMENT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAPPSERVICEPLAN(formats strfmt.Registry) error {
	if swag.IsZero(m.APPSERVICEPLAN) { // not required
		return nil
	}

	if m.APPSERVICEPLAN != nil {
		if err := m.APPSERVICEPLAN.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPSERVICEPLAN")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPSERVICEPLAN")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAPPSTREAM(formats strfmt.Registry) error {
	if swag.IsZero(m.APPSTREAM) { // not required
		return nil
	}

	if m.APPSTREAM != nil {
		if err := m.APPSTREAM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPSTREAM")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPSTREAM")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateATHENA(formats strfmt.Registry) error {
	if swag.IsZero(m.ATHENA) { // not required
		return nil
	}

	if m.ATHENA != nil {
		if err := m.ATHENA.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ATHENA")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ATHENA")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAUTOMATIONACCOUNT(formats strfmt.Registry) error {
	if swag.IsZero(m.AUTOMATIONACCOUNT) { // not required
		return nil
	}

	if m.AUTOMATIONACCOUNT != nil {
		if err := m.AUTOMATIONACCOUNT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AUTOMATIONACCOUNT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AUTOMATIONACCOUNT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAUTOSCALING(formats strfmt.Registry) error {
	if swag.IsZero(m.AUTOSCALING) { // not required
		return nil
	}

	if m.AUTOSCALING != nil {
		if err := m.AUTOSCALING.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AUTOSCALING")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AUTOSCALING")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateBACKUPPROTECTEDITEMS(formats strfmt.Registry) error {
	if swag.IsZero(m.BACKUPPROTECTEDITEMS) { // not required
		return nil
	}

	if m.BACKUPPROTECTEDITEMS != nil {
		if err := m.BACKUPPROTECTEDITEMS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BACKUPPROTECTEDITEMS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BACKUPPROTECTEDITEMS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateBATCHACCOUNT(formats strfmt.Registry) error {
	if swag.IsZero(m.BATCHACCOUNT) { // not required
		return nil
	}

	if m.BATCHACCOUNT != nil {
		if err := m.BATCHACCOUNT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BATCHACCOUNT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BATCHACCOUNT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateBLOBSTORAGE(formats strfmt.Registry) error {
	if swag.IsZero(m.BLOBSTORAGE) { // not required
		return nil
	}

	if m.BLOBSTORAGE != nil {
		if err := m.BLOBSTORAGE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BLOBSTORAGE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BLOBSTORAGE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateBOTSERVICES(formats strfmt.Registry) error {
	if swag.IsZero(m.BOTSERVICES) { // not required
		return nil
	}

	if m.BOTSERVICES != nil {
		if err := m.BOTSERVICES.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BOTSERVICES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BOTSERVICES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCDNPROFILE(formats strfmt.Registry) error {
	if swag.IsZero(m.CDNPROFILE) { // not required
		return nil
	}

	if m.CDNPROFILE != nil {
		if err := m.CDNPROFILE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CDNPROFILE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CDNPROFILE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCLOUDFRONT(formats strfmt.Registry) error {
	if swag.IsZero(m.CLOUDFRONT) { // not required
		return nil
	}

	if m.CLOUDFRONT != nil {
		if err := m.CLOUDFRONT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CLOUDFRONT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CLOUDFRONT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCLOUDSEARCH(formats strfmt.Registry) error {
	if swag.IsZero(m.CLOUDSEARCH) { // not required
		return nil
	}

	if m.CLOUDSEARCH != nil {
		if err := m.CLOUDSEARCH.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CLOUDSEARCH")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CLOUDSEARCH")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCODEBUILD(formats strfmt.Registry) error {
	if swag.IsZero(m.CODEBUILD) { // not required
		return nil
	}

	if m.CODEBUILD != nil {
		if err := m.CODEBUILD.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CODEBUILD")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CODEBUILD")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCOGNITIVESEARCH(formats strfmt.Registry) error {
	if swag.IsZero(m.COGNITIVESEARCH) { // not required
		return nil
	}

	if m.COGNITIVESEARCH != nil {
		if err := m.COGNITIVESEARCH.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("COGNITIVESEARCH")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("COGNITIVESEARCH")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCOGNITIVESERVICES(formats strfmt.Registry) error {
	if swag.IsZero(m.COGNITIVESERVICES) { // not required
		return nil
	}

	if m.COGNITIVESERVICES != nil {
		if err := m.COGNITIVESERVICES.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("COGNITIVESERVICES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("COGNITIVESERVICES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCOGNITO(formats strfmt.Registry) error {
	if swag.IsZero(m.COGNITO) { // not required
		return nil
	}

	if m.COGNITO != nil {
		if err := m.COGNITO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("COGNITO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("COGNITO")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCONTAINERREGISTRY(formats strfmt.Registry) error {
	if swag.IsZero(m.CONTAINERREGISTRY) { // not required
		return nil
	}

	if m.CONTAINERREGISTRY != nil {
		if err := m.CONTAINERREGISTRY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CONTAINERREGISTRY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CONTAINERREGISTRY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCOSMOSDB(formats strfmt.Registry) error {
	if swag.IsZero(m.COSMOSDB) { // not required
		return nil
	}

	if m.COSMOSDB != nil {
		if err := m.COSMOSDB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("COSMOSDB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("COSMOSDB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDATABRICKS(formats strfmt.Registry) error {
	if swag.IsZero(m.DATABRICKS) { // not required
		return nil
	}

	if m.DATABRICKS != nil {
		if err := m.DATABRICKS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DATABRICKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DATABRICKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDATAFACTORY(formats strfmt.Registry) error {
	if swag.IsZero(m.DATAFACTORY) { // not required
		return nil
	}

	if m.DATAFACTORY != nil {
		if err := m.DATAFACTORY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DATAFACTORY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DATAFACTORY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDATALAKEANALYTICS(formats strfmt.Registry) error {
	if swag.IsZero(m.DATALAKEANALYTICS) { // not required
		return nil
	}

	if m.DATALAKEANALYTICS != nil {
		if err := m.DATALAKEANALYTICS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DATALAKEANALYTICS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DATALAKEANALYTICS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDATALAKESTORE(formats strfmt.Registry) error {
	if swag.IsZero(m.DATALAKESTORE) { // not required
		return nil
	}

	if m.DATALAKESTORE != nil {
		if err := m.DATALAKESTORE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DATALAKESTORE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DATALAKESTORE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDIRECTCONNECT(formats strfmt.Registry) error {
	if swag.IsZero(m.DIRECTCONNECT) { // not required
		return nil
	}

	if m.DIRECTCONNECT != nil {
		if err := m.DIRECTCONNECT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DIRECTCONNECT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DIRECTCONNECT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDMSREPLICATION(formats strfmt.Registry) error {
	if swag.IsZero(m.DMSREPLICATION) { // not required
		return nil
	}

	if m.DMSREPLICATION != nil {
		if err := m.DMSREPLICATION.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DMSREPLICATION")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DMSREPLICATION")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDMSREPLICATIONTASKS(formats strfmt.Registry) error {
	if swag.IsZero(m.DMSREPLICATIONTASKS) { // not required
		return nil
	}

	if m.DMSREPLICATIONTASKS != nil {
		if err := m.DMSREPLICATIONTASKS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DMSREPLICATIONTASKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DMSREPLICATIONTASKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDISKS(formats strfmt.Registry) error {
	if swag.IsZero(m.DISKS) { // not required
		return nil
	}

	if m.DISKS != nil {
		if err := m.DISKS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DISKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DISKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDOCDB(formats strfmt.Registry) error {
	if swag.IsZero(m.DOCDB) { // not required
		return nil
	}

	if m.DOCDB != nil {
		if err := m.DOCDB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DOCDB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DOCDB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDYNAMODB(formats strfmt.Registry) error {
	if swag.IsZero(m.DYNAMODB) { // not required
		return nil
	}

	if m.DYNAMODB != nil {
		if err := m.DYNAMODB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DYNAMODB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DYNAMODB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEBS(formats strfmt.Registry) error {
	if swag.IsZero(m.EBS) { // not required
		return nil
	}

	if m.EBS != nil {
		if err := m.EBS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EBS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EBS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEC2(formats strfmt.Registry) error {
	if swag.IsZero(m.EC2) { // not required
		return nil
	}

	if m.EC2 != nil {
		if err := m.EC2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EC2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EC2")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateECS(formats strfmt.Registry) error {
	if swag.IsZero(m.ECS) { // not required
		return nil
	}

	if m.ECS != nil {
		if err := m.ECS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ECS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ECS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEFS(formats strfmt.Registry) error {
	if swag.IsZero(m.EFS) { // not required
		return nil
	}

	if m.EFS != nil {
		if err := m.EFS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EFS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EFS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateELASTICACHE(formats strfmt.Registry) error {
	if swag.IsZero(m.ELASTICACHE) { // not required
		return nil
	}

	if m.ELASTICACHE != nil {
		if err := m.ELASTICACHE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICACHE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICACHE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateELASTICBEANSTALK(formats strfmt.Registry) error {
	if swag.IsZero(m.ELASTICBEANSTALK) { // not required
		return nil
	}

	if m.ELASTICBEANSTALK != nil {
		if err := m.ELASTICBEANSTALK.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICBEANSTALK")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICBEANSTALK")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateELASTICSEARCH(formats strfmt.Registry) error {
	if swag.IsZero(m.ELASTICSEARCH) { // not required
		return nil
	}

	if m.ELASTICSEARCH != nil {
		if err := m.ELASTICSEARCH.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICSEARCH")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICSEARCH")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateELASTICTRANSCODER(formats strfmt.Registry) error {
	if swag.IsZero(m.ELASTICTRANSCODER) { // not required
		return nil
	}

	if m.ELASTICTRANSCODER != nil {
		if err := m.ELASTICTRANSCODER.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICTRANSCODER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICTRANSCODER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateELB(formats strfmt.Registry) error {
	if swag.IsZero(m.ELB) { // not required
		return nil
	}

	if m.ELB != nil {
		if err := m.ELB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEMR(formats strfmt.Registry) error {
	if swag.IsZero(m.EMR) { // not required
		return nil
	}

	if m.EMR != nil {
		if err := m.EMR.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EMR")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EMR")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEVENTBRIDGE(formats strfmt.Registry) error {
	if swag.IsZero(m.EVENTBRIDGE) { // not required
		return nil
	}

	if m.EVENTBRIDGE != nil {
		if err := m.EVENTBRIDGE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EVENTBRIDGE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EVENTBRIDGE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEVENTGRID(formats strfmt.Registry) error {
	if swag.IsZero(m.EVENTGRID) { // not required
		return nil
	}

	if m.EVENTGRID != nil {
		if err := m.EVENTGRID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EVENTGRID")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EVENTGRID")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEVENTHUB(formats strfmt.Registry) error {
	if swag.IsZero(m.EVENTHUB) { // not required
		return nil
	}

	if m.EVENTHUB != nil {
		if err := m.EVENTHUB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EVENTHUB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EVENTHUB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEXPRESSROUTECIRCUIT(formats strfmt.Registry) error {
	if swag.IsZero(m.EXPRESSROUTECIRCUIT) { // not required
		return nil
	}

	if m.EXPRESSROUTECIRCUIT != nil {
		if err := m.EXPRESSROUTECIRCUIT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EXPRESSROUTECIRCUIT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EXPRESSROUTECIRCUIT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateFILESTORAGE(formats strfmt.Registry) error {
	if swag.IsZero(m.FILESTORAGE) { // not required
		return nil
	}

	if m.FILESTORAGE != nil {
		if err := m.FILESTORAGE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FILESTORAGE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FILESTORAGE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateFIREHOSE(formats strfmt.Registry) error {
	if swag.IsZero(m.FIREHOSE) { // not required
		return nil
	}

	if m.FIREHOSE != nil {
		if err := m.FIREHOSE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FIREHOSE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FIREHOSE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateFIREWALL(formats strfmt.Registry) error {
	if swag.IsZero(m.FIREWALL) { // not required
		return nil
	}

	if m.FIREWALL != nil {
		if err := m.FIREWALL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FIREWALL")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FIREWALL")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateFRONTDOORS(formats strfmt.Registry) error {
	if swag.IsZero(m.FRONTDOORS) { // not required
		return nil
	}

	if m.FRONTDOORS != nil {
		if err := m.FRONTDOORS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FRONTDOORS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FRONTDOORS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateFSX(formats strfmt.Registry) error {
	if swag.IsZero(m.FSX) { // not required
		return nil
	}

	if m.FSX != nil {
		if err := m.FSX.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FSX")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FSX")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateFUNCTIONAPP(formats strfmt.Registry) error {
	if swag.IsZero(m.FUNCTIONAPP) { // not required
		return nil
	}

	if m.FUNCTIONAPP != nil {
		if err := m.FUNCTIONAPP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FUNCTIONAPP")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FUNCTIONAPP")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateGLUE(formats strfmt.Registry) error {
	if swag.IsZero(m.GLUE) { // not required
		return nil
	}

	if m.GLUE != nil {
		if err := m.GLUE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GLUE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GLUE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateHDINSIGHT(formats strfmt.Registry) error {
	if swag.IsZero(m.HDINSIGHT) { // not required
		return nil
	}

	if m.HDINSIGHT != nil {
		if err := m.HDINSIGHT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HDINSIGHT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("HDINSIGHT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateIOTHUB(formats strfmt.Registry) error {
	if swag.IsZero(m.IOTHUB) { // not required
		return nil
	}

	if m.IOTHUB != nil {
		if err := m.IOTHUB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IOTHUB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IOTHUB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateKEYVAULT(formats strfmt.Registry) error {
	if swag.IsZero(m.KEYVAULT) { // not required
		return nil
	}

	if m.KEYVAULT != nil {
		if err := m.KEYVAULT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KEYVAULT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KEYVAULT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateKINESIS(formats strfmt.Registry) error {
	if swag.IsZero(m.KINESIS) { // not required
		return nil
	}

	if m.KINESIS != nil {
		if err := m.KINESIS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KINESIS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KINESIS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateKINESISVIDEO(formats strfmt.Registry) error {
	if swag.IsZero(m.KINESISVIDEO) { // not required
		return nil
	}

	if m.KINESISVIDEO != nil {
		if err := m.KINESISVIDEO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KINESISVIDEO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KINESISVIDEO")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateLAMBDA(formats strfmt.Registry) error {
	if swag.IsZero(m.LAMBDA) { // not required
		return nil
	}

	if m.LAMBDA != nil {
		if err := m.LAMBDA.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LAMBDA")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LAMBDA")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateLOADBALANCERS(formats strfmt.Registry) error {
	if swag.IsZero(m.LOADBALANCERS) { // not required
		return nil
	}

	if m.LOADBALANCERS != nil {
		if err := m.LOADBALANCERS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LOADBALANCERS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LOADBALANCERS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateLOGANALYTICSWORKSPACES(formats strfmt.Registry) error {
	if swag.IsZero(m.LOGANALYTICSWORKSPACES) { // not required
		return nil
	}

	if m.LOGANALYTICSWORKSPACES != nil {
		if err := m.LOGANALYTICSWORKSPACES.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LOGANALYTICSWORKSPACES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LOGANALYTICSWORKSPACES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateLOGICAPPS(formats strfmt.Registry) error {
	if swag.IsZero(m.LOGICAPPS) { // not required
		return nil
	}

	if m.LOGICAPPS != nil {
		if err := m.LOGICAPPS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LOGICAPPS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LOGICAPPS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMARIADB(formats strfmt.Registry) error {
	if swag.IsZero(m.MARIADB) { // not required
		return nil
	}

	if m.MARIADB != nil {
		if err := m.MARIADB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MARIADB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MARIADB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMEDIACONNECT(formats strfmt.Registry) error {
	if swag.IsZero(m.MEDIACONNECT) { // not required
		return nil
	}

	if m.MEDIACONNECT != nil {
		if err := m.MEDIACONNECT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIACONNECT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIACONNECT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMEDIACONVERT(formats strfmt.Registry) error {
	if swag.IsZero(m.MEDIACONVERT) { // not required
		return nil
	}

	if m.MEDIACONVERT != nil {
		if err := m.MEDIACONVERT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIACONVERT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIACONVERT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMEDIAPACKAGELIVE(formats strfmt.Registry) error {
	if swag.IsZero(m.MEDIAPACKAGELIVE) { // not required
		return nil
	}

	if m.MEDIAPACKAGELIVE != nil {
		if err := m.MEDIAPACKAGELIVE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIAPACKAGELIVE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIAPACKAGELIVE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMEDIAPACKAGEVOD(formats strfmt.Registry) error {
	if swag.IsZero(m.MEDIAPACKAGEVOD) { // not required
		return nil
	}

	if m.MEDIAPACKAGEVOD != nil {
		if err := m.MEDIAPACKAGEVOD.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIAPACKAGEVOD")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIAPACKAGEVOD")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMEDIASTORE(formats strfmt.Registry) error {
	if swag.IsZero(m.MEDIASTORE) { // not required
		return nil
	}

	if m.MEDIASTORE != nil {
		if err := m.MEDIASTORE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIASTORE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIASTORE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMEDIATAILOR(formats strfmt.Registry) error {
	if swag.IsZero(m.MEDIATAILOR) { // not required
		return nil
	}

	if m.MEDIATAILOR != nil {
		if err := m.MEDIATAILOR.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIATAILOR")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIATAILOR")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMLWORKSPACES(formats strfmt.Registry) error {
	if swag.IsZero(m.MLWORKSPACES) { // not required
		return nil
	}

	if m.MLWORKSPACES != nil {
		if err := m.MLWORKSPACES.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MLWORKSPACES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MLWORKSPACES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMQ(formats strfmt.Registry) error {
	if swag.IsZero(m.MQ) { // not required
		return nil
	}

	if m.MQ != nil {
		if err := m.MQ.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MQ")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MQ")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMSKBROKER(formats strfmt.Registry) error {
	if swag.IsZero(m.MSKBROKER) { // not required
		return nil
	}

	if m.MSKBROKER != nil {
		if err := m.MSKBROKER.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MSKBROKER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MSKBROKER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMSKCLUSTER(formats strfmt.Registry) error {
	if swag.IsZero(m.MSKCLUSTER) { // not required
		return nil
	}

	if m.MSKCLUSTER != nil {
		if err := m.MSKCLUSTER.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MSKCLUSTER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MSKCLUSTER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMYSQL(formats strfmt.Registry) error {
	if swag.IsZero(m.MYSQL) { // not required
		return nil
	}

	if m.MYSQL != nil {
		if err := m.MYSQL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MYSQL")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MYSQL")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMYSQLFLEXIBLE(formats strfmt.Registry) error {
	if swag.IsZero(m.MYSQLFLEXIBLE) { // not required
		return nil
	}

	if m.MYSQLFLEXIBLE != nil {
		if err := m.MYSQLFLEXIBLE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MYSQLFLEXIBLE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MYSQLFLEXIBLE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateNATGATEWAY(formats strfmt.Registry) error {
	if swag.IsZero(m.NATGATEWAY) { // not required
		return nil
	}

	if m.NATGATEWAY != nil {
		if err := m.NATGATEWAY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NATGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NATGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateNATGATEWAYS(formats strfmt.Registry) error {
	if swag.IsZero(m.NATGATEWAYS) { // not required
		return nil
	}

	if m.NATGATEWAYS != nil {
		if err := m.NATGATEWAYS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NATGATEWAYS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NATGATEWAYS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateNETAPPPOOLS(formats strfmt.Registry) error {
	if swag.IsZero(m.NETAPPPOOLS) { // not required
		return nil
	}

	if m.NETAPPPOOLS != nil {
		if err := m.NETAPPPOOLS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NETAPPPOOLS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NETAPPPOOLS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateNETWORKELB(formats strfmt.Registry) error {
	if swag.IsZero(m.NETWORKELB) { // not required
		return nil
	}

	if m.NETWORKELB != nil {
		if err := m.NETWORKELB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NETWORKELB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NETWORKELB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateNETWORKINTERFACE(formats strfmt.Registry) error {
	if swag.IsZero(m.NETWORKINTERFACE) { // not required
		return nil
	}

	if m.NETWORKINTERFACE != nil {
		if err := m.NETWORKINTERFACE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NETWORKINTERFACE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NETWORKINTERFACE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateNOTIFICATIONHUBS(formats strfmt.Registry) error {
	if swag.IsZero(m.NOTIFICATIONHUBS) { // not required
		return nil
	}

	if m.NOTIFICATIONHUBS != nil {
		if err := m.NOTIFICATIONHUBS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NOTIFICATIONHUBS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NOTIFICATIONHUBS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateOPSWORKS(formats strfmt.Registry) error {
	if swag.IsZero(m.OPSWORKS) { // not required
		return nil
	}

	if m.OPSWORKS != nil {
		if err := m.OPSWORKS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OPSWORKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OPSWORKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validatePOSTGRESQL(formats strfmt.Registry) error {
	if swag.IsZero(m.POSTGRESQL) { // not required
		return nil
	}

	if m.POSTGRESQL != nil {
		if err := m.POSTGRESQL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("POSTGRESQL")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("POSTGRESQL")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validatePOSTGRESQLCITUS(formats strfmt.Registry) error {
	if swag.IsZero(m.POSTGRESQLCITUS) { // not required
		return nil
	}

	if m.POSTGRESQLCITUS != nil {
		if err := m.POSTGRESQLCITUS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("POSTGRESQLCITUS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("POSTGRESQLCITUS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validatePOSTGRESQLFLEXIBLE(formats strfmt.Registry) error {
	if swag.IsZero(m.POSTGRESQLFLEXIBLE) { // not required
		return nil
	}

	if m.POSTGRESQLFLEXIBLE != nil {
		if err := m.POSTGRESQLFLEXIBLE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("POSTGRESQLFLEXIBLE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("POSTGRESQLFLEXIBLE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validatePOWERBIEMBEDDED(formats strfmt.Registry) error {
	if swag.IsZero(m.POWERBIEMBEDDED) { // not required
		return nil
	}

	if m.POWERBIEMBEDDED != nil {
		if err := m.POWERBIEMBEDDED.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("POWERBIEMBEDDED")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("POWERBIEMBEDDED")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validatePUBLICIP(formats strfmt.Registry) error {
	if swag.IsZero(m.PUBLICIP) { // not required
		return nil
	}

	if m.PUBLICIP != nil {
		if err := m.PUBLICIP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PUBLICIP")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PUBLICIP")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateQUEUESTORAGE(formats strfmt.Registry) error {
	if swag.IsZero(m.QUEUESTORAGE) { // not required
		return nil
	}

	if m.QUEUESTORAGE != nil {
		if err := m.QUEUESTORAGE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("QUEUESTORAGE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("QUEUESTORAGE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateRDS(formats strfmt.Registry) error {
	if swag.IsZero(m.RDS) { // not required
		return nil
	}

	if m.RDS != nil {
		if err := m.RDS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RDS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RDS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateRECOVERYPROTECTEDITEM(formats strfmt.Registry) error {
	if swag.IsZero(m.RECOVERYPROTECTEDITEM) { // not required
		return nil
	}

	if m.RECOVERYPROTECTEDITEM != nil {
		if err := m.RECOVERYPROTECTEDITEM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RECOVERYPROTECTEDITEM")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RECOVERYPROTECTEDITEM")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateRECOVERYPROTECTEDITEMS(formats strfmt.Registry) error {
	if swag.IsZero(m.RECOVERYPROTECTEDITEMS) { // not required
		return nil
	}

	if m.RECOVERYPROTECTEDITEMS != nil {
		if err := m.RECOVERYPROTECTEDITEMS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RECOVERYPROTECTEDITEMS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RECOVERYPROTECTEDITEMS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateRECOVERYSERVICES(formats strfmt.Registry) error {
	if swag.IsZero(m.RECOVERYSERVICES) { // not required
		return nil
	}

	if m.RECOVERYSERVICES != nil {
		if err := m.RECOVERYSERVICES.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RECOVERYSERVICES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RECOVERYSERVICES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateREDISCACHE(formats strfmt.Registry) error {
	if swag.IsZero(m.REDISCACHE) { // not required
		return nil
	}

	if m.REDISCACHE != nil {
		if err := m.REDISCACHE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("REDISCACHE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("REDISCACHE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateREDISCACHEENTERPRISE(formats strfmt.Registry) error {
	if swag.IsZero(m.REDISCACHEENTERPRISE) { // not required
		return nil
	}

	if m.REDISCACHEENTERPRISE != nil {
		if err := m.REDISCACHEENTERPRISE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("REDISCACHEENTERPRISE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("REDISCACHEENTERPRISE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateREDSHIFT(formats strfmt.Registry) error {
	if swag.IsZero(m.REDSHIFT) { // not required
		return nil
	}

	if m.REDSHIFT != nil {
		if err := m.REDSHIFT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("REDSHIFT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("REDSHIFT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateRELAYNAMESPACES(formats strfmt.Registry) error {
	if swag.IsZero(m.RELAYNAMESPACES) { // not required
		return nil
	}

	if m.RELAYNAMESPACES != nil {
		if err := m.RELAYNAMESPACES.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RELAYNAMESPACES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RELAYNAMESPACES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateROUTE53(formats strfmt.Registry) error {
	if swag.IsZero(m.ROUTE53) { // not required
		return nil
	}

	if m.ROUTE53 != nil {
		if err := m.ROUTE53.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ROUTE53")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ROUTE53")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateROUTE53RESOLVER(formats strfmt.Registry) error {
	if swag.IsZero(m.ROUTE53RESOLVER) { // not required
		return nil
	}

	if m.ROUTE53RESOLVER != nil {
		if err := m.ROUTE53RESOLVER.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ROUTE53RESOLVER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ROUTE53RESOLVER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateS3(formats strfmt.Registry) error {
	if swag.IsZero(m.S3) { // not required
		return nil
	}

	if m.S3 != nil {
		if err := m.S3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("S3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("S3")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSAGEMAKER(formats strfmt.Registry) error {
	if swag.IsZero(m.SAGEMAKER) { // not required
		return nil
	}

	if m.SAGEMAKER != nil {
		if err := m.SAGEMAKER.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SAGEMAKER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SAGEMAKER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSERVICEBUS(formats strfmt.Registry) error {
	if swag.IsZero(m.SERVICEBUS) { // not required
		return nil
	}

	if m.SERVICEBUS != nil {
		if err := m.SERVICEBUS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SERVICEBUS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SERVICEBUS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSERVICEFABRICMESH(formats strfmt.Registry) error {
	if swag.IsZero(m.SERVICEFABRICMESH) { // not required
		return nil
	}

	if m.SERVICEFABRICMESH != nil {
		if err := m.SERVICEFABRICMESH.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SERVICEFABRICMESH")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SERVICEFABRICMESH")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSES(formats strfmt.Registry) error {
	if swag.IsZero(m.SES) { // not required
		return nil
	}

	if m.SES != nil {
		if err := m.SES.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSIGNALR(formats strfmt.Registry) error {
	if swag.IsZero(m.SIGNALR) { // not required
		return nil
	}

	if m.SIGNALR != nil {
		if err := m.SIGNALR.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SIGNALR")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SIGNALR")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSNS(formats strfmt.Registry) error {
	if swag.IsZero(m.SNS) { // not required
		return nil
	}

	if m.SNS != nil {
		if err := m.SNS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SNS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SNS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSQLDATABASE(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLDATABASE) { // not required
		return nil
	}

	if m.SQLDATABASE != nil {
		if err := m.SQLDATABASE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SQLDATABASE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SQLDATABASE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSQLELASTICPOOL(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLELASTICPOOL) { // not required
		return nil
	}

	if m.SQLELASTICPOOL != nil {
		if err := m.SQLELASTICPOOL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SQLELASTICPOOL")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SQLELASTICPOOL")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSQLMANAGEDINSTANCE(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLMANAGEDINSTANCE) { // not required
		return nil
	}

	if m.SQLMANAGEDINSTANCE != nil {
		if err := m.SQLMANAGEDINSTANCE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SQLMANAGEDINSTANCE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SQLMANAGEDINSTANCE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSQS(formats strfmt.Registry) error {
	if swag.IsZero(m.SQS) { // not required
		return nil
	}

	if m.SQS != nil {
		if err := m.SQS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SQS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SQS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSTEPFUNCTIONS(formats strfmt.Registry) error {
	if swag.IsZero(m.STEPFUNCTIONS) { // not required
		return nil
	}

	if m.STEPFUNCTIONS != nil {
		if err := m.STEPFUNCTIONS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("STEPFUNCTIONS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("STEPFUNCTIONS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSTORAGEACCOUNT(formats strfmt.Registry) error {
	if swag.IsZero(m.STORAGEACCOUNT) { // not required
		return nil
	}

	if m.STORAGEACCOUNT != nil {
		if err := m.STORAGEACCOUNT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("STORAGEACCOUNT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("STORAGEACCOUNT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSTREAMANALYTICS(formats strfmt.Registry) error {
	if swag.IsZero(m.STREAMANALYTICS) { // not required
		return nil
	}

	if m.STREAMANALYTICS != nil {
		if err := m.STREAMANALYTICS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("STREAMANALYTICS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("STREAMANALYTICS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSWFACTIVITY(formats strfmt.Registry) error {
	if swag.IsZero(m.SWFACTIVITY) { // not required
		return nil
	}

	if m.SWFACTIVITY != nil {
		if err := m.SWFACTIVITY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SWFACTIVITY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SWFACTIVITY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSWFWORKFLOW(formats strfmt.Registry) error {
	if swag.IsZero(m.SWFWORKFLOW) { // not required
		return nil
	}

	if m.SWFWORKFLOW != nil {
		if err := m.SWFWORKFLOW.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SWFWORKFLOW")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SWFWORKFLOW")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSYNAPSEWORKSPACES(formats strfmt.Registry) error {
	if swag.IsZero(m.SYNAPSEWORKSPACES) { // not required
		return nil
	}

	if m.SYNAPSEWORKSPACES != nil {
		if err := m.SYNAPSEWORKSPACES.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SYNAPSEWORKSPACES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SYNAPSEWORKSPACES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateTABLESTORAGE(formats strfmt.Registry) error {
	if swag.IsZero(m.TABLESTORAGE) { // not required
		return nil
	}

	if m.TABLESTORAGE != nil {
		if err := m.TABLESTORAGE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TABLESTORAGE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TABLESTORAGE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateTRAFFICMANAGER(formats strfmt.Registry) error {
	if swag.IsZero(m.TRAFFICMANAGER) { // not required
		return nil
	}

	if m.TRAFFICMANAGER != nil {
		if err := m.TRAFFICMANAGER.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TRAFFICMANAGER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TRAFFICMANAGER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateTRANSITGATEWAY(formats strfmt.Registry) error {
	if swag.IsZero(m.TRANSITGATEWAY) { // not required
		return nil
	}

	if m.TRANSITGATEWAY != nil {
		if err := m.TRANSITGATEWAY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TRANSITGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TRANSITGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateVIRTUALDESKTOP(formats strfmt.Registry) error {
	if swag.IsZero(m.VIRTUALDESKTOP) { // not required
		return nil
	}

	if m.VIRTUALDESKTOP != nil {
		if err := m.VIRTUALDESKTOP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALDESKTOP")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALDESKTOP")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateVIRTUALHUBS(formats strfmt.Registry) error {
	if swag.IsZero(m.VIRTUALHUBS) { // not required
		return nil
	}

	if m.VIRTUALHUBS != nil {
		if err := m.VIRTUALHUBS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALHUBS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALHUBS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateVIRTUALMACHINE(formats strfmt.Registry) error {
	if swag.IsZero(m.VIRTUALMACHINE) { // not required
		return nil
	}

	if m.VIRTUALMACHINE != nil {
		if err := m.VIRTUALMACHINE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALMACHINE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALMACHINE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateVIRTUALMACHINESCALESET(formats strfmt.Registry) error {
	if swag.IsZero(m.VIRTUALMACHINESCALESET) { // not required
		return nil
	}

	if m.VIRTUALMACHINESCALESET != nil {
		if err := m.VIRTUALMACHINESCALESET.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALMACHINESCALESET")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALMACHINESCALESET")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateVIRTUALMACHINESCALESETVM(formats strfmt.Registry) error {
	if swag.IsZero(m.VIRTUALMACHINESCALESETVM) { // not required
		return nil
	}

	if m.VIRTUALMACHINESCALESETVM != nil {
		if err := m.VIRTUALMACHINESCALESETVM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALMACHINESCALESETVM")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALMACHINESCALESETVM")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateVIRTUALNETWORKGATEWAY(formats strfmt.Registry) error {
	if swag.IsZero(m.VIRTUALNETWORKGATEWAY) { // not required
		return nil
	}

	if m.VIRTUALNETWORKGATEWAY != nil {
		if err := m.VIRTUALNETWORKGATEWAY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALNETWORKGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALNETWORKGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateVIRTUALNETWORKS(formats strfmt.Registry) error {
	if swag.IsZero(m.VIRTUALNETWORKS) { // not required
		return nil
	}

	if m.VIRTUALNETWORKS != nil {
		if err := m.VIRTUALNETWORKS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALNETWORKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALNETWORKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateVPN(formats strfmt.Registry) error {
	if swag.IsZero(m.VPN) { // not required
		return nil
	}

	if m.VPN != nil {
		if err := m.VPN.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VPN")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VPN")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateVPNGATEWAYS(formats strfmt.Registry) error {
	if swag.IsZero(m.VPNGATEWAYS) { // not required
		return nil
	}

	if m.VPNGATEWAYS != nil {
		if err := m.VPNGATEWAYS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VPNGATEWAYS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VPNGATEWAYS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateWORKSPACE(formats strfmt.Registry) error {
	if swag.IsZero(m.WORKSPACE) { // not required
		return nil
	}

	if m.WORKSPACE != nil {
		if err := m.WORKSPACE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WORKSPACE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WORKSPACE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateWORKSPACEDIRECTORY(formats strfmt.Registry) error {
	if swag.IsZero(m.WORKSPACEDIRECTORY) { // not required
		return nil
	}

	if m.WORKSPACEDIRECTORY != nil {
		if err := m.WORKSPACEDIRECTORY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WORKSPACEDIRECTORY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WORKSPACEDIRECTORY")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cloud services based on the context it is used
func (m *CloudServices) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAKSMANAGEDCLUSTER(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateANALYSISSERVICE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPIGATEWAY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPIMANAGEMENT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPPLICATIONELB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPPLICATIONGATEWAY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPPLICATIONINSIGHTS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPPSERVICE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPPSERVICEENVIRONMENT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPPSERVICEPLAN(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPPSTREAM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateATHENA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAUTOMATIONACCOUNT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAUTOSCALING(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBACKUPPROTECTEDITEMS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBATCHACCOUNT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBLOBSTORAGE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBOTSERVICES(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBLOBSTORAGE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCDNPROFILE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCLOUDFRONT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCLOUDSEARCH(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCODEBUILD(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCOGNITIVESEARCH(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCOGNITIVESERVICES(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCOGNITO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCONTAINERREGISTRY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCOSMOSDB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDATABRICKS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDATAFACTORY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDATALAKEANALYTICS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDATALAKESTORE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDIRECTCONNECT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDISKS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDMSREPLICATION(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDMSREPLICATIONTASKS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDOCDB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDYNAMODB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEBS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEC2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateECS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEFS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateELASTICACHE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateELASTICBEANSTALK(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateELASTICSEARCH(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateELASTICTRANSCODER(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateELB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEMR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEVENTBRIDGE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEVENTGRID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEVENTHUB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEXPRESSROUTECIRCUIT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFILESTORAGE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFIREHOSE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFIREWALL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFRONTDOORS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFUNCTIONAPP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFSX(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGLUE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHDINSIGHT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIOTHUB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKEYVAULT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKINESIS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKINESISVIDEO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLAMBDA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLOADBALANCERS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLOGANALYTICSWORKSPACES(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLOGICAPPS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMARIADB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMEDIACONNECT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMEDIACONVERT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMEDIAPACKAGELIVE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMEDIAPACKAGEVOD(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMEDIASTORE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMEDIATAILOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMLWORKSPACES(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMQ(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMSKBROKER(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMSKCLUSTER(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMYSQL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMYSQLFLEXIBLE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNATGATEWAY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNATGATEWAYS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNETAPPPOOLS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNETWORKELB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNETWORKINTERFACE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOTIFICATIONHUBS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOPSWORKS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePOSTGRESQL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePOSTGRESQLCITUS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePOSTGRESQLFLEXIBLE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePOWERBIEMBEDDED(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePUBLICIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQUEUESTORAGE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRDS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRECOVERYPROTECTEDITEM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRECOVERYPROTECTEDITEMS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRECOVERYSERVICES(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateREDISCACHE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateREDISCACHEENTERPRISE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateREDSHIFT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRELAYNAMESPACES(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateROUTE53(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateROUTE53RESOLVER(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSAGEMAKER(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSERVICEBUS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSERVICEFABRICMESH(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSES(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSNS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLDATABASE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLELASTICPOOL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLMANAGEDINSTANCE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSTEPFUNCTIONS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSTORAGEACCOUNT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSTREAMANALYTICS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSWFACTIVITY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSWFWORKFLOW(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSYNAPSEWORKSPACES(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTABLESTORAGE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTRAFFICMANAGER(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTRANSITGATEWAY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVIRTUALDESKTOP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVIRTUALHUBS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVIRTUALMACHINE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVIRTUALMACHINESCALESET(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVIRTUALMACHINESCALESETVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVIRTUALNETWORKGATEWAY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVIRTUALNETWORKS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVPN(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVPNGATEWAYS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWORKSPACE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWORKSPACEDIRECTORY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudServices) contextValidateAKSMANAGEDCLUSTER(ctx context.Context, formats strfmt.Registry) error {

	if m.AKSMANAGEDCLUSTER != nil {
		if err := m.AKSMANAGEDCLUSTER.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AKSMANAGEDCLUSTER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AKSMANAGEDCLUSTER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateANALYSISSERVICE(ctx context.Context, formats strfmt.Registry) error {

	if m.ANALYSISSERVICE != nil {
		if err := m.ANALYSISSERVICE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ANALYSISSERVICE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ANALYSISSERVICE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAPIGATEWAY(ctx context.Context, formats strfmt.Registry) error {

	if m.APIGATEWAY != nil {
		if err := m.APIGATEWAY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APIGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APIGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAPIMANAGEMENT(ctx context.Context, formats strfmt.Registry) error {

	if m.APIMANAGEMENT != nil {
		if err := m.APIMANAGEMENT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APIMANAGEMENT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APIMANAGEMENT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAPPLICATIONELB(ctx context.Context, formats strfmt.Registry) error {

	if m.APPLICATIONELB != nil {
		if err := m.APPLICATIONELB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPLICATIONELB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPLICATIONELB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAPPLICATIONGATEWAY(ctx context.Context, formats strfmt.Registry) error {

	if m.APPLICATIONGATEWAY != nil {
		if err := m.APPLICATIONGATEWAY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPLICATIONGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPLICATIONGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAPPLICATIONINSIGHTS(ctx context.Context, formats strfmt.Registry) error {

	if m.APPLICATIONINSIGHTS != nil {
		if err := m.APPLICATIONINSIGHTS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPLICATIONINSIGHTS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPLICATIONINSIGHTS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAPPSERVICE(ctx context.Context, formats strfmt.Registry) error {

	if m.APPSERVICE != nil {
		if err := m.APPSERVICE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPSERVICE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPSERVICE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAPPSERVICEENVIRONMENT(ctx context.Context, formats strfmt.Registry) error {

	if m.APPSERVICEENVIRONMENT != nil {
		if err := m.APPSERVICEENVIRONMENT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPSERVICEENVIRONMENT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPSERVICEENVIRONMENT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAPPSERVICEPLAN(ctx context.Context, formats strfmt.Registry) error {

	if m.APPSERVICEPLAN != nil {
		if err := m.APPSERVICEPLAN.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPSERVICEPLAN")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPSERVICEPLAN")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAPPSTREAM(ctx context.Context, formats strfmt.Registry) error {

	if m.APPSTREAM != nil {
		if err := m.APPSTREAM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPSTREAM")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPSTREAM")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateATHENA(ctx context.Context, formats strfmt.Registry) error {

	if m.ATHENA != nil {
		if err := m.ATHENA.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ATHENA")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ATHENA")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAUTOMATIONACCOUNT(ctx context.Context, formats strfmt.Registry) error {

	if m.AUTOMATIONACCOUNT != nil {
		if err := m.AUTOMATIONACCOUNT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AUTOMATIONACCOUNT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AUTOMATIONACCOUNT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAUTOSCALING(ctx context.Context, formats strfmt.Registry) error {

	if m.AUTOSCALING != nil {
		if err := m.AUTOSCALING.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AUTOSCALING")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AUTOSCALING")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateBACKUPPROTECTEDITEMS(ctx context.Context, formats strfmt.Registry) error {

	if m.BACKUPPROTECTEDITEMS != nil {
		if err := m.BACKUPPROTECTEDITEMS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BACKUPPROTECTEDITEMS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BACKUPPROTECTEDITEMS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateBATCHACCOUNT(ctx context.Context, formats strfmt.Registry) error {

	if m.BATCHACCOUNT != nil {
		if err := m.BATCHACCOUNT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BATCHACCOUNT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BATCHACCOUNT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateBLOBSTORAGE(ctx context.Context, formats strfmt.Registry) error {

	if m.BLOBSTORAGE != nil {
		if err := m.BLOBSTORAGE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BLOBSTORAGE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BLOBSTORAGE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateBOTSERVICES(ctx context.Context, formats strfmt.Registry) error {

	if m.BOTSERVICES != nil {
		if err := m.BOTSERVICES.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BOTSERVICES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BOTSERVICES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCDNPROFILE(ctx context.Context, formats strfmt.Registry) error {

	if m.CDNPROFILE != nil {
		if err := m.CDNPROFILE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CDNPROFILE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CDNPROFILE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCLOUDFRONT(ctx context.Context, formats strfmt.Registry) error {

	if m.CLOUDFRONT != nil {
		if err := m.CLOUDFRONT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CLOUDFRONT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CLOUDFRONT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCLOUDSEARCH(ctx context.Context, formats strfmt.Registry) error {

	if m.CLOUDSEARCH != nil {
		if err := m.CLOUDSEARCH.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CLOUDSEARCH")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CLOUDSEARCH")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCODEBUILD(ctx context.Context, formats strfmt.Registry) error {

	if m.CODEBUILD != nil {
		if err := m.CODEBUILD.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CODEBUILD")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CODEBUILD")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCOGNITIVESEARCH(ctx context.Context, formats strfmt.Registry) error {

	if m.COGNITIVESEARCH != nil {
		if err := m.COGNITIVESEARCH.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("COGNITIVESEARCH")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("COGNITIVESEARCH")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCOGNITIVESERVICES(ctx context.Context, formats strfmt.Registry) error {

	if m.COGNITIVESERVICES != nil {
		if err := m.COGNITIVESERVICES.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("COGNITIVESERVICES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("COGNITIVESERVICES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCOGNITO(ctx context.Context, formats strfmt.Registry) error {

	if m.COGNITO != nil {
		if err := m.COGNITO.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("COGNITO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("COGNITO")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCONTAINERREGISTRY(ctx context.Context, formats strfmt.Registry) error {

	if m.CONTAINERREGISTRY != nil {
		if err := m.CONTAINERREGISTRY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CONTAINERREGISTRY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CONTAINERREGISTRY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCOSMOSDB(ctx context.Context, formats strfmt.Registry) error {

	if m.COSMOSDB != nil {
		if err := m.COSMOSDB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("COSMOSDB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("COSMOSDB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDATABRICKS(ctx context.Context, formats strfmt.Registry) error {

	if m.DATABRICKS != nil {
		if err := m.DATABRICKS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DATABRICKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DATABRICKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDATAFACTORY(ctx context.Context, formats strfmt.Registry) error {

	if m.DATAFACTORY != nil {
		if err := m.DATAFACTORY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DATAFACTORY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DATAFACTORY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDATALAKEANALYTICS(ctx context.Context, formats strfmt.Registry) error {

	if m.DATALAKEANALYTICS != nil {
		if err := m.DATALAKEANALYTICS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DATALAKEANALYTICS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DATALAKEANALYTICS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDATALAKESTORE(ctx context.Context, formats strfmt.Registry) error {

	if m.DATALAKESTORE != nil {
		if err := m.DATALAKESTORE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DATALAKESTORE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DATALAKESTORE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDIRECTCONNECT(ctx context.Context, formats strfmt.Registry) error {

	if m.DIRECTCONNECT != nil {
		if err := m.DIRECTCONNECT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DIRECTCONNECT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DIRECTCONNECT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDISKS(ctx context.Context, formats strfmt.Registry) error {

	if m.DISKS != nil {
		if err := m.DISKS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DISKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DISKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDMSREPLICATION(ctx context.Context, formats strfmt.Registry) error {

	if m.DMSREPLICATION != nil {
		if err := m.DMSREPLICATION.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DMSREPLICATION")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DMSREPLICATION")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDMSREPLICATIONTASKS(ctx context.Context, formats strfmt.Registry) error {

	if m.DMSREPLICATIONTASKS != nil {
		if err := m.DMSREPLICATIONTASKS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DMSREPLICATIONTASKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DMSREPLICATIONTASKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDOCDB(ctx context.Context, formats strfmt.Registry) error {

	if m.DOCDB != nil {
		if err := m.DOCDB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DOCDB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DOCDB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDYNAMODB(ctx context.Context, formats strfmt.Registry) error {

	if m.DYNAMODB != nil {
		if err := m.DYNAMODB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DYNAMODB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DYNAMODB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEBS(ctx context.Context, formats strfmt.Registry) error {

	if m.EBS != nil {
		if err := m.EBS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EBS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EBS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEC2(ctx context.Context, formats strfmt.Registry) error {

	if m.EC2 != nil {
		if err := m.EC2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EC2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EC2")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateECS(ctx context.Context, formats strfmt.Registry) error {

	if m.ECS != nil {
		if err := m.ECS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ECS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ECS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEFS(ctx context.Context, formats strfmt.Registry) error {

	if m.EFS != nil {
		if err := m.EFS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EFS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EFS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateELASTICACHE(ctx context.Context, formats strfmt.Registry) error {

	if m.ELASTICACHE != nil {
		if err := m.ELASTICACHE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICACHE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICACHE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateELASTICBEANSTALK(ctx context.Context, formats strfmt.Registry) error {

	if m.ELASTICBEANSTALK != nil {
		if err := m.ELASTICBEANSTALK.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICBEANSTALK")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICBEANSTALK")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateELASTICSEARCH(ctx context.Context, formats strfmt.Registry) error {

	if m.ELASTICSEARCH != nil {
		if err := m.ELASTICSEARCH.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICSEARCH")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICSEARCH")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateELASTICTRANSCODER(ctx context.Context, formats strfmt.Registry) error {

	if m.ELASTICTRANSCODER != nil {
		if err := m.ELASTICTRANSCODER.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICTRANSCODER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICTRANSCODER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateELB(ctx context.Context, formats strfmt.Registry) error {

	if m.ELB != nil {
		if err := m.ELB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEMR(ctx context.Context, formats strfmt.Registry) error {

	if m.EMR != nil {
		if err := m.EMR.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EMR")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EMR")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEVENTBRIDGE(ctx context.Context, formats strfmt.Registry) error {

	if m.EVENTBRIDGE != nil {
		if err := m.EVENTBRIDGE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EVENTBRIDGE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EVENTBRIDGE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEVENTGRID(ctx context.Context, formats strfmt.Registry) error {

	if m.EVENTGRID != nil {
		if err := m.EVENTGRID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EVENTGRID")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EVENTGRID")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEVENTHUB(ctx context.Context, formats strfmt.Registry) error {

	if m.EVENTHUB != nil {
		if err := m.EVENTHUB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EVENTHUB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EVENTHUB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEXPRESSROUTECIRCUIT(ctx context.Context, formats strfmt.Registry) error {

	if m.EXPRESSROUTECIRCUIT != nil {
		if err := m.EXPRESSROUTECIRCUIT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EXPRESSROUTECIRCUIT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EXPRESSROUTECIRCUIT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateFILESTORAGE(ctx context.Context, formats strfmt.Registry) error {

	if m.FILESTORAGE != nil {
		if err := m.FILESTORAGE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FILESTORAGE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FILESTORAGE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateFIREHOSE(ctx context.Context, formats strfmt.Registry) error {

	if m.FIREHOSE != nil {
		if err := m.FIREHOSE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FIREHOSE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FIREHOSE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateFIREWALL(ctx context.Context, formats strfmt.Registry) error {

	if m.FIREWALL != nil {
		if err := m.FIREWALL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FIREWALL")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FIREWALL")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateFRONTDOORS(ctx context.Context, formats strfmt.Registry) error {

	if m.FRONTDOORS != nil {
		if err := m.FRONTDOORS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FRONTDOORS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FRONTDOORS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateFSX(ctx context.Context, formats strfmt.Registry) error {

	if m.FSX != nil {
		if err := m.FSX.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FSX")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FSX")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateFUNCTIONAPP(ctx context.Context, formats strfmt.Registry) error {

	if m.FUNCTIONAPP != nil {
		if err := m.FUNCTIONAPP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FUNCTIONAPP")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FUNCTIONAPP")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateGLUE(ctx context.Context, formats strfmt.Registry) error {

	if m.GLUE != nil {
		if err := m.GLUE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GLUE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GLUE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateHDINSIGHT(ctx context.Context, formats strfmt.Registry) error {

	if m.HDINSIGHT != nil {
		if err := m.HDINSIGHT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HDINSIGHT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("HDINSIGHT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateIOTHUB(ctx context.Context, formats strfmt.Registry) error {

	if m.IOTHUB != nil {
		if err := m.IOTHUB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IOTHUB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IOTHUB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateKEYVAULT(ctx context.Context, formats strfmt.Registry) error {

	if m.KEYVAULT != nil {
		if err := m.KEYVAULT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KEYVAULT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KEYVAULT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateKINESIS(ctx context.Context, formats strfmt.Registry) error {

	if m.KINESIS != nil {
		if err := m.KINESIS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KINESIS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KINESIS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateKINESISVIDEO(ctx context.Context, formats strfmt.Registry) error {

	if m.KINESISVIDEO != nil {
		if err := m.KINESISVIDEO.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KINESISVIDEO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KINESISVIDEO")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateLAMBDA(ctx context.Context, formats strfmt.Registry) error {

	if m.LAMBDA != nil {
		if err := m.LAMBDA.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LAMBDA")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LAMBDA")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateLOADBALANCERS(ctx context.Context, formats strfmt.Registry) error {

	if m.LOADBALANCERS != nil {
		if err := m.LOADBALANCERS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LOADBALANCERS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LOADBALANCERS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateLOGANALYTICSWORKSPACES(ctx context.Context, formats strfmt.Registry) error {

	if m.LOGANALYTICSWORKSPACES != nil {
		if err := m.LOGANALYTICSWORKSPACES.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LOGANALYTICSWORKSPACES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LOGANALYTICSWORKSPACES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateLOGICAPPS(ctx context.Context, formats strfmt.Registry) error {

	if m.LOGICAPPS != nil {
		if err := m.LOGICAPPS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LOGICAPPS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LOGICAPPS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMARIADB(ctx context.Context, formats strfmt.Registry) error {

	if m.MARIADB != nil {
		if err := m.MARIADB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MARIADB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MARIADB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMEDIACONNECT(ctx context.Context, formats strfmt.Registry) error {

	if m.MEDIACONNECT != nil {
		if err := m.MEDIACONNECT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIACONNECT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIACONNECT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMEDIACONVERT(ctx context.Context, formats strfmt.Registry) error {

	if m.MEDIACONVERT != nil {
		if err := m.MEDIACONVERT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIACONVERT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIACONVERT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMEDIAPACKAGELIVE(ctx context.Context, formats strfmt.Registry) error {

	if m.MEDIAPACKAGELIVE != nil {
		if err := m.MEDIAPACKAGELIVE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIAPACKAGELIVE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIAPACKAGELIVE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMEDIAPACKAGEVOD(ctx context.Context, formats strfmt.Registry) error {

	if m.MEDIAPACKAGEVOD != nil {
		if err := m.MEDIAPACKAGEVOD.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIAPACKAGEVOD")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIAPACKAGEVOD")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMEDIASTORE(ctx context.Context, formats strfmt.Registry) error {

	if m.MEDIASTORE != nil {
		if err := m.MEDIASTORE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIASTORE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIASTORE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMEDIATAILOR(ctx context.Context, formats strfmt.Registry) error {

	if m.MEDIATAILOR != nil {
		if err := m.MEDIATAILOR.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIATAILOR")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIATAILOR")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMLWORKSPACES(ctx context.Context, formats strfmt.Registry) error {

	if m.MLWORKSPACES != nil {
		if err := m.MLWORKSPACES.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MLWORKSPACES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MLWORKSPACES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMQ(ctx context.Context, formats strfmt.Registry) error {

	if m.MQ != nil {
		if err := m.MQ.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MQ")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MQ")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMSKBROKER(ctx context.Context, formats strfmt.Registry) error {

	if m.MSKBROKER != nil {
		if err := m.MSKBROKER.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MSKBROKER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MSKBROKER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMSKCLUSTER(ctx context.Context, formats strfmt.Registry) error {

	if m.MSKCLUSTER != nil {
		if err := m.MSKCLUSTER.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MSKCLUSTER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MSKCLUSTER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMYSQL(ctx context.Context, formats strfmt.Registry) error {

	if m.MYSQL != nil {
		if err := m.MYSQL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MYSQL")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MYSQL")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMYSQLFLEXIBLE(ctx context.Context, formats strfmt.Registry) error {

	if m.MYSQLFLEXIBLE != nil {
		if err := m.MYSQLFLEXIBLE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MYSQLFLEXIBLE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MYSQLFLEXIBLE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateNATGATEWAY(ctx context.Context, formats strfmt.Registry) error {

	if m.NATGATEWAY != nil {
		if err := m.NATGATEWAY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NATGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NATGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateNATGATEWAYS(ctx context.Context, formats strfmt.Registry) error {

	if m.NATGATEWAYS != nil {
		if err := m.NATGATEWAYS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NATGATEWAYS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NATGATEWAYS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateNETWORKELB(ctx context.Context, formats strfmt.Registry) error {

	if m.NETWORKELB != nil {
		if err := m.NETWORKELB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NETWORKELB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NETWORKELB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateNETAPPPOOLS(ctx context.Context, formats strfmt.Registry) error {

	if m.NETAPPPOOLS != nil {
		if err := m.NETAPPPOOLS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NETAPPPOOLS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NETAPPPOOLS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateNETWORKINTERFACE(ctx context.Context, formats strfmt.Registry) error {

	if m.NETWORKINTERFACE != nil {
		if err := m.NETWORKINTERFACE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NETWORKINTERFACE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NETWORKINTERFACE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateNOTIFICATIONHUBS(ctx context.Context, formats strfmt.Registry) error {

	if m.NOTIFICATIONHUBS != nil {
		if err := m.NOTIFICATIONHUBS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NOTIFICATIONHUBS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NOTIFICATIONHUBS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateOPSWORKS(ctx context.Context, formats strfmt.Registry) error {

	if m.OPSWORKS != nil {
		if err := m.OPSWORKS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OPSWORKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OPSWORKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidatePOSTGRESQL(ctx context.Context, formats strfmt.Registry) error {

	if m.POSTGRESQL != nil {
		if err := m.POSTGRESQL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("POSTGRESQL")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("POSTGRESQL")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidatePOSTGRESQLCITUS(ctx context.Context, formats strfmt.Registry) error {

	if m.POSTGRESQLCITUS != nil {
		if err := m.POSTGRESQLCITUS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("POSTGRESQLCITUS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("POSTGRESQLCITUS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidatePOSTGRESQLFLEXIBLE(ctx context.Context, formats strfmt.Registry) error {

	if m.POSTGRESQLFLEXIBLE != nil {
		if err := m.POSTGRESQLFLEXIBLE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("POSTGRESQLFLEXIBLE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("POSTGRESQLFLEXIBLE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidatePOWERBIEMBEDDED(ctx context.Context, formats strfmt.Registry) error {

	if m.POWERBIEMBEDDED != nil {
		if err := m.POWERBIEMBEDDED.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("POWERBIEMBEDDED")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("POWERBIEMBEDDED")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidatePUBLICIP(ctx context.Context, formats strfmt.Registry) error {

	if m.PUBLICIP != nil {
		if err := m.PUBLICIP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PUBLICIP")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PUBLICIP")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateQUEUESTORAGE(ctx context.Context, formats strfmt.Registry) error {

	if m.QUEUESTORAGE != nil {
		if err := m.QUEUESTORAGE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("QUEUESTORAGE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("QUEUESTORAGE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateRDS(ctx context.Context, formats strfmt.Registry) error {

	if m.RDS != nil {
		if err := m.RDS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RDS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RDS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateRECOVERYPROTECTEDITEM(ctx context.Context, formats strfmt.Registry) error {

	if m.RECOVERYPROTECTEDITEM != nil {
		if err := m.RECOVERYPROTECTEDITEM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RECOVERYPROTECTEDITEM")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RECOVERYPROTECTEDITEM")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateRECOVERYPROTECTEDITEMS(ctx context.Context, formats strfmt.Registry) error {

	if m.RECOVERYPROTECTEDITEMS != nil {
		if err := m.RECOVERYPROTECTEDITEMS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RECOVERYPROTECTEDITEMS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RECOVERYPROTECTEDITEMS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateRECOVERYSERVICES(ctx context.Context, formats strfmt.Registry) error {

	if m.RECOVERYSERVICES != nil {
		if err := m.RECOVERYSERVICES.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RECOVERYSERVICES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RECOVERYSERVICES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateREDISCACHE(ctx context.Context, formats strfmt.Registry) error {

	if m.REDISCACHE != nil {
		if err := m.REDISCACHE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("REDISCACHE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("REDISCACHE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateREDISCACHEENTERPRISE(ctx context.Context, formats strfmt.Registry) error {

	if m.REDISCACHEENTERPRISE != nil {
		if err := m.REDISCACHEENTERPRISE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("REDISCACHEENTERPRISE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("REDISCACHEENTERPRISE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateREDSHIFT(ctx context.Context, formats strfmt.Registry) error {

	if m.REDSHIFT != nil {
		if err := m.REDSHIFT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("REDSHIFT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("REDSHIFT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateRELAYNAMESPACES(ctx context.Context, formats strfmt.Registry) error {

	if m.RELAYNAMESPACES != nil {
		if err := m.RELAYNAMESPACES.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RELAYNAMESPACES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RELAYNAMESPACES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateROUTE53(ctx context.Context, formats strfmt.Registry) error {

	if m.ROUTE53 != nil {
		if err := m.ROUTE53.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ROUTE53")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ROUTE53")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateROUTE53RESOLVER(ctx context.Context, formats strfmt.Registry) error {

	if m.ROUTE53RESOLVER != nil {
		if err := m.ROUTE53RESOLVER.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ROUTE53RESOLVER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ROUTE53RESOLVER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateS3(ctx context.Context, formats strfmt.Registry) error {

	if m.S3 != nil {
		if err := m.S3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("S3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("S3")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSAGEMAKER(ctx context.Context, formats strfmt.Registry) error {

	if m.SAGEMAKER != nil {
		if err := m.SAGEMAKER.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SAGEMAKER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SAGEMAKER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSERVICEBUS(ctx context.Context, formats strfmt.Registry) error {

	if m.SERVICEBUS != nil {
		if err := m.SERVICEBUS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SERVICEBUS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SERVICEBUS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSERVICEFABRICMESH(ctx context.Context, formats strfmt.Registry) error {

	if m.SERVICEFABRICMESH != nil {
		if err := m.SERVICEFABRICMESH.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SERVICEFABRICMESH")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SERVICEFABRICMESH")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSES(ctx context.Context, formats strfmt.Registry) error {

	if m.SES != nil {
		if err := m.SES.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSNS(ctx context.Context, formats strfmt.Registry) error {

	if m.SNS != nil {
		if err := m.SNS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SNS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SNS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSIGNALR(ctx context.Context, formats strfmt.Registry) error {

	if m.SIGNALR != nil {
		if err := m.SIGNALR.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SIGNALR")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SIGNALR")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSQLDATABASE(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLDATABASE != nil {
		if err := m.SQLDATABASE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SQLDATABASE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SQLDATABASE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSQLELASTICPOOL(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLELASTICPOOL != nil {
		if err := m.SQLELASTICPOOL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SQLELASTICPOOL")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SQLELASTICPOOL")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSQLMANAGEDINSTANCE(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLMANAGEDINSTANCE != nil {
		if err := m.SQLMANAGEDINSTANCE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SQLMANAGEDINSTANCE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SQLMANAGEDINSTANCE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSQS(ctx context.Context, formats strfmt.Registry) error {

	if m.SQS != nil {
		if err := m.SQS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SQS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SQS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSTEPFUNCTIONS(ctx context.Context, formats strfmt.Registry) error {

	if m.STEPFUNCTIONS != nil {
		if err := m.STEPFUNCTIONS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("STEPFUNCTIONS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("STEPFUNCTIONS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSTORAGEACCOUNT(ctx context.Context, formats strfmt.Registry) error {

	if m.STORAGEACCOUNT != nil {
		if err := m.STORAGEACCOUNT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("STORAGEACCOUNT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("STORAGEACCOUNT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSTREAMANALYTICS(ctx context.Context, formats strfmt.Registry) error {

	if m.STREAMANALYTICS != nil {
		if err := m.STREAMANALYTICS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("STREAMANALYTICS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("STREAMANALYTICS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSWFACTIVITY(ctx context.Context, formats strfmt.Registry) error {

	if m.SWFACTIVITY != nil {
		if err := m.SWFACTIVITY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SWFACTIVITY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SWFACTIVITY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSWFWORKFLOW(ctx context.Context, formats strfmt.Registry) error {

	if m.SWFWORKFLOW != nil {
		if err := m.SWFWORKFLOW.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SWFWORKFLOW")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SWFWORKFLOW")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSYNAPSEWORKSPACES(ctx context.Context, formats strfmt.Registry) error {

	if m.SYNAPSEWORKSPACES != nil {
		if err := m.SYNAPSEWORKSPACES.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SYNAPSEWORKSPACES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SYNAPSEWORKSPACES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateTABLESTORAGE(ctx context.Context, formats strfmt.Registry) error {

	if m.TABLESTORAGE != nil {
		if err := m.TABLESTORAGE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TABLESTORAGE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TABLESTORAGE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateTRAFFICMANAGER(ctx context.Context, formats strfmt.Registry) error {

	if m.TRAFFICMANAGER != nil {
		if err := m.TRAFFICMANAGER.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TRAFFICMANAGER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TRAFFICMANAGER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateTRANSITGATEWAY(ctx context.Context, formats strfmt.Registry) error {

	if m.TRANSITGATEWAY != nil {
		if err := m.TRANSITGATEWAY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TRANSITGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TRANSITGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateVIRTUALDESKTOP(ctx context.Context, formats strfmt.Registry) error {

	if m.VIRTUALDESKTOP != nil {
		if err := m.VIRTUALDESKTOP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALDESKTOP")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALDESKTOP")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateVIRTUALMACHINE(ctx context.Context, formats strfmt.Registry) error {

	if m.VIRTUALMACHINE != nil {
		if err := m.VIRTUALMACHINE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALMACHINE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALMACHINE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateVIRTUALHUBS(ctx context.Context, formats strfmt.Registry) error {

	if m.VIRTUALHUBS != nil {
		if err := m.VIRTUALHUBS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALHUBS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALHUBS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateVIRTUALMACHINESCALESET(ctx context.Context, formats strfmt.Registry) error {

	if m.VIRTUALMACHINESCALESET != nil {
		if err := m.VIRTUALMACHINESCALESET.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALMACHINESCALESET")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALMACHINESCALESET")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateVIRTUALMACHINESCALESETVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VIRTUALMACHINESCALESETVM != nil {
		if err := m.VIRTUALMACHINESCALESETVM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALMACHINESCALESETVM")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALMACHINESCALESETVM")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateVIRTUALNETWORKGATEWAY(ctx context.Context, formats strfmt.Registry) error {

	if m.VIRTUALNETWORKGATEWAY != nil {
		if err := m.VIRTUALNETWORKGATEWAY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALNETWORKGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALNETWORKGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateVIRTUALNETWORKS(ctx context.Context, formats strfmt.Registry) error {

	if m.VIRTUALNETWORKS != nil {
		if err := m.VIRTUALNETWORKS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VIRTUALNETWORKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VIRTUALNETWORKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateVPN(ctx context.Context, formats strfmt.Registry) error {

	if m.VPN != nil {
		if err := m.VPN.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VPN")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VPN")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateVPNGATEWAYS(ctx context.Context, formats strfmt.Registry) error {

	if m.VPNGATEWAYS != nil {
		if err := m.VPNGATEWAYS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VPNGATEWAYS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VPNGATEWAYS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateWORKSPACE(ctx context.Context, formats strfmt.Registry) error {

	if m.WORKSPACE != nil {
		if err := m.WORKSPACE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WORKSPACE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WORKSPACE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateWORKSPACEDIRECTORY(ctx context.Context, formats strfmt.Registry) error {

	if m.WORKSPACEDIRECTORY != nil {
		if err := m.WORKSPACEDIRECTORY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WORKSPACEDIRECTORY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WORKSPACEDIRECTORY")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudServices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudServices) UnmarshalBinary(b []byte) error {
	var res CloudServices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
