// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CloudServices cloud services
//
// swagger:model CloudServices
type CloudServices struct {

	// APIGATEWAY monitoring settings
	APIGATEWAY *CloudServiceSettings `json:"APIGATEWAY,omitempty"`

	// APPLICATIONELB monitoring settings
	APPLICATIONELB *CloudServiceSettings `json:"APPLICATIONELB,omitempty"`

	// APPSTREAM monitoring settings
	APPSTREAM *CloudServiceSettings `json:"APPSTREAM,omitempty"`

	// ATHENA monitoring settings
	ATHENA *CloudServiceSettings `json:"ATHENA,omitempty"`

	// AUTOSCALING monitoring settings
	AUTOSCALING *CloudServiceSettings `json:"AUTOSCALING,omitempty"`

	// CLOUDFRONT monitoring settings
	CLOUDFRONT *CloudServiceSettings `json:"CLOUDFRONT,omitempty"`

	// CLOUDSEARCH monitoring settings
	CLOUDSEARCH *CloudServiceSettings `json:"CLOUDSEARCH,omitempty"`

	// CODEBUILD monitoring settings
	CODEBUILD *CloudServiceSettings `json:"CODEBUILD,omitempty"`

	// COGNITO monitoring settings
	COGNITO *CloudServiceSettings `json:"COGNITO,omitempty"`

	// DIRECTCONNECT monitoring settings
	DIRECTCONNECT *CloudServiceSettings `json:"DIRECTCONNECT,omitempty"`

	// DMSREPLICATION monitoring settings
	DMSREPLICATION *CloudServiceSettings `json:"DMSREPLICATION,omitempty"`

	// DMSREPLICATIONTASKS monitoring settings
	DMSREPLICATIONTASKS *CloudServiceSettings `json:"DMSREPLICATIONTASKS,omitempty"`

	// DOCDB monitoring settings
	DOCDB *CloudServiceSettings `json:"DOCDB,omitempty"`

	// DYNAMODB monitoring settings
	DYNAMODB *CloudServiceSettings `json:"DYNAMODB,omitempty"`

	// EBS monitoring settings
	EBS *CloudServiceSettings `json:"EBS,omitempty"`

	// EC2 monitoring settings
	EC2 *CloudServiceSettings `json:"EC2,omitempty"`

	// ECS monitoring settings
	ECS *CloudServiceSettings `json:"ECS,omitempty"`

	// EFS monitoring settings
	EFS *CloudServiceSettings `json:"EFS,omitempty"`

	// ELASTICACHE monitoring settings
	ELASTICACHE *CloudServiceSettings `json:"ELASTICACHE,omitempty"`

	// ELASTICBEANSTALK monitoring settings
	ELASTICBEANSTALK *CloudServiceSettings `json:"ELASTICBEANSTALK,omitempty"`

	// ELASTICSEARCH monitoring settings
	ELASTICSEARCH *CloudServiceSettings `json:"ELASTICSEARCH,omitempty"`

	// ELASTICTRANSCODER monitoring settings
	ELASTICTRANSCODER *CloudServiceSettings `json:"ELASTICTRANSCODER,omitempty"`

	// ELB monitoring settings
	ELB *CloudServiceSettings `json:"ELB,omitempty"`

	// EMR monitoring settings
	EMR *CloudServiceSettings `json:"EMR,omitempty"`

	// EVENTBRIDGE monitoring settings
	EVENTBRIDGE *CloudServiceSettings `json:"EVENTBRIDGE,omitempty"`

	// FIREHOSE monitoring settings
	FIREHOSE *CloudServiceSettings `json:"FIREHOSE,omitempty"`

	// FSX monitoring settings
	FSX *CloudServiceSettings `json:"FSX,omitempty"`

	// GLUE monitoring settings
	GLUE *CloudServiceSettings `json:"GLUE,omitempty"`

	// KINESIS monitoring settings
	KINESIS *CloudServiceSettings `json:"KINESIS,omitempty"`

	// KINESISVIDEO monitoring settings
	KINESISVIDEO *CloudServiceSettings `json:"KINESISVIDEO,omitempty"`

	// LAMBDA monitoring settings
	LAMBDA *CloudServiceSettings `json:"LAMBDA,omitempty"`

	// MEDIACONNECT monitoring settings
	MEDIACONNECT *CloudServiceSettings `json:"MEDIACONNECT,omitempty"`

	// MEDIACONVERT monitoring settings
	MEDIACONVERT *CloudServiceSettings `json:"MEDIACONVERT,omitempty"`

	// MEDIAPACKAGELIVE monitoring settings
	MEDIAPACKAGELIVE *CloudServiceSettings `json:"MEDIAPACKAGELIVE,omitempty"`

	// MEDIAPACKAGEVOD monitoring settings
	MEDIAPACKAGEVOD *CloudServiceSettings `json:"MEDIAPACKAGEVOD,omitempty"`

	// MEDIASTORE monitoring settings
	MEDIASTORE *CloudServiceSettings `json:"MEDIASTORE,omitempty"`

	// MEDIATAILOR monitoring settings
	MEDIATAILOR *CloudServiceSettings `json:"MEDIATAILOR,omitempty"`

	// MQ monitoring settings
	MQ *CloudServiceSettings `json:"MQ,omitempty"`

	// MSKBROKER monitoring settings
	MSKBROKER *CloudServiceSettings `json:"MSKBROKER,omitempty"`

	// MSKCLUSTER monitoring settings
	MSKCLUSTER *CloudServiceSettings `json:"MSKCLUSTER,omitempty"`

	// NATGATEWAY monitoring settings
	NATGATEWAY *CloudServiceSettings `json:"NATGATEWAY,omitempty"`

	// NETWORKELB monitoring settings
	NETWORKELB *CloudServiceSettings `json:"NETWORKELB,omitempty"`

	// OPSWORKS monitoring settings
	OPSWORKS *CloudServiceSettings `json:"OPSWORKS,omitempty"`

	// RDS monitoring settings
	RDS *CloudServiceSettings `json:"RDS,omitempty"`

	// REDSHIFT monitoring settings
	REDSHIFT *CloudServiceSettings `json:"REDSHIFT,omitempty"`

	// ROUTE53 monitoring settings
	ROUTE53 *CloudServiceSettings `json:"ROUTE53,omitempty"`

	// ROUTE53RESOLVER monitoring settings
	ROUTE53RESOLVER *CloudServiceSettings `json:"ROUTE53RESOLVER,omitempty"`

	// S3 monitoring settings
	S3 *CloudServiceSettings `json:"S3,omitempty"`

	// SAGEMAKER monitoring settings
	SAGEMAKER *CloudServiceSettings `json:"SAGEMAKER,omitempty"`

	// SES monitoring settings
	SES *CloudServiceSettings `json:"SES,omitempty"`

	// SNS monitoring settings
	SNS *CloudServiceSettings `json:"SNS,omitempty"`

	// SQS monitoring settings
	SQS *CloudServiceSettings `json:"SQS,omitempty"`

	// STEPFUNCTIONS monitoring settings
	STEPFUNCTIONS *CloudServiceSettings `json:"STEPFUNCTIONS,omitempty"`

	// SWFACTIVITY monitoring settings
	SWFACTIVITY *CloudServiceSettings `json:"SWFACTIVITY,omitempty"`

	// SWFWORKFLOW monitoring settings
	SWFWORKFLOW *CloudServiceSettings `json:"SWFWORKFLOW,omitempty"`

	// TRANSITGATEWAY monitoring settings
	TRANSITGATEWAY *CloudServiceSettings `json:"TRANSITGATEWAY,omitempty"`

	// VPN monitoring settings
	VPN *CloudServiceSettings `json:"VPN,omitempty"`

	// WORKSPACE monitoring settings
	WORKSPACE *CloudServiceSettings `json:"WORKSPACE,omitempty"`

	// WORKSPACEDIRECTORY monitoring settings
	WORKSPACEDIRECTORY *CloudServiceSettings `json:"WORKSPACEDIRECTORY,omitempty"`
}

// Validate validates this cloud services
func (m *CloudServices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIGATEWAY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPPLICATIONELB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPPSTREAM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateATHENA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAUTOSCALING(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCLOUDFRONT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCLOUDSEARCH(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCODEBUILD(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCOGNITO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDIRECTCONNECT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDMSREPLICATION(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDMSREPLICATIONTASKS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDOCDB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDYNAMODB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEBS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEC2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateECS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEFS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateELASTICACHE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateELASTICBEANSTALK(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateELASTICSEARCH(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateELASTICTRANSCODER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateELB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEMR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEVENTBRIDGE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFIREHOSE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFSX(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGLUE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKINESIS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKINESISVIDEO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLAMBDA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMEDIACONNECT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMEDIACONVERT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMEDIAPACKAGELIVE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMEDIAPACKAGEVOD(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMEDIASTORE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMEDIATAILOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMQ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMSKBROKER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMSKCLUSTER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNATGATEWAY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNETWORKELB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOPSWORKS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRDS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateREDSHIFT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateROUTE53(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateROUTE53RESOLVER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSAGEMAKER(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSES(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSTEPFUNCTIONS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSWFACTIVITY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSWFWORKFLOW(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTRANSITGATEWAY(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVPN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWORKSPACE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWORKSPACEDIRECTORY(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudServices) validateAPIGATEWAY(formats strfmt.Registry) error {
	if swag.IsZero(m.APIGATEWAY) { // not required
		return nil
	}

	if m.APIGATEWAY != nil {
		if err := m.APIGATEWAY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APIGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APIGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAPPLICATIONELB(formats strfmt.Registry) error {
	if swag.IsZero(m.APPLICATIONELB) { // not required
		return nil
	}

	if m.APPLICATIONELB != nil {
		if err := m.APPLICATIONELB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPLICATIONELB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPLICATIONELB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAPPSTREAM(formats strfmt.Registry) error {
	if swag.IsZero(m.APPSTREAM) { // not required
		return nil
	}

	if m.APPSTREAM != nil {
		if err := m.APPSTREAM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPSTREAM")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPSTREAM")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateATHENA(formats strfmt.Registry) error {
	if swag.IsZero(m.ATHENA) { // not required
		return nil
	}

	if m.ATHENA != nil {
		if err := m.ATHENA.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ATHENA")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ATHENA")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateAUTOSCALING(formats strfmt.Registry) error {
	if swag.IsZero(m.AUTOSCALING) { // not required
		return nil
	}

	if m.AUTOSCALING != nil {
		if err := m.AUTOSCALING.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AUTOSCALING")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AUTOSCALING")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCLOUDFRONT(formats strfmt.Registry) error {
	if swag.IsZero(m.CLOUDFRONT) { // not required
		return nil
	}

	if m.CLOUDFRONT != nil {
		if err := m.CLOUDFRONT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CLOUDFRONT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CLOUDFRONT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCLOUDSEARCH(formats strfmt.Registry) error {
	if swag.IsZero(m.CLOUDSEARCH) { // not required
		return nil
	}

	if m.CLOUDSEARCH != nil {
		if err := m.CLOUDSEARCH.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CLOUDSEARCH")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CLOUDSEARCH")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCODEBUILD(formats strfmt.Registry) error {
	if swag.IsZero(m.CODEBUILD) { // not required
		return nil
	}

	if m.CODEBUILD != nil {
		if err := m.CODEBUILD.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CODEBUILD")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CODEBUILD")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateCOGNITO(formats strfmt.Registry) error {
	if swag.IsZero(m.COGNITO) { // not required
		return nil
	}

	if m.COGNITO != nil {
		if err := m.COGNITO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("COGNITO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("COGNITO")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDIRECTCONNECT(formats strfmt.Registry) error {
	if swag.IsZero(m.DIRECTCONNECT) { // not required
		return nil
	}

	if m.DIRECTCONNECT != nil {
		if err := m.DIRECTCONNECT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DIRECTCONNECT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DIRECTCONNECT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDMSREPLICATION(formats strfmt.Registry) error {
	if swag.IsZero(m.DMSREPLICATION) { // not required
		return nil
	}

	if m.DMSREPLICATION != nil {
		if err := m.DMSREPLICATION.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DMSREPLICATION")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DMSREPLICATION")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDMSREPLICATIONTASKS(formats strfmt.Registry) error {
	if swag.IsZero(m.DMSREPLICATIONTASKS) { // not required
		return nil
	}

	if m.DMSREPLICATIONTASKS != nil {
		if err := m.DMSREPLICATIONTASKS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DMSREPLICATIONTASKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DMSREPLICATIONTASKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDOCDB(formats strfmt.Registry) error {
	if swag.IsZero(m.DOCDB) { // not required
		return nil
	}

	if m.DOCDB != nil {
		if err := m.DOCDB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DOCDB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DOCDB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateDYNAMODB(formats strfmt.Registry) error {
	if swag.IsZero(m.DYNAMODB) { // not required
		return nil
	}

	if m.DYNAMODB != nil {
		if err := m.DYNAMODB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DYNAMODB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DYNAMODB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEBS(formats strfmt.Registry) error {
	if swag.IsZero(m.EBS) { // not required
		return nil
	}

	if m.EBS != nil {
		if err := m.EBS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EBS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EBS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEC2(formats strfmt.Registry) error {
	if swag.IsZero(m.EC2) { // not required
		return nil
	}

	if m.EC2 != nil {
		if err := m.EC2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EC2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EC2")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateECS(formats strfmt.Registry) error {
	if swag.IsZero(m.ECS) { // not required
		return nil
	}

	if m.ECS != nil {
		if err := m.ECS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ECS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ECS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEFS(formats strfmt.Registry) error {
	if swag.IsZero(m.EFS) { // not required
		return nil
	}

	if m.EFS != nil {
		if err := m.EFS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EFS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EFS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateELASTICACHE(formats strfmt.Registry) error {
	if swag.IsZero(m.ELASTICACHE) { // not required
		return nil
	}

	if m.ELASTICACHE != nil {
		if err := m.ELASTICACHE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICACHE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICACHE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateELASTICBEANSTALK(formats strfmt.Registry) error {
	if swag.IsZero(m.ELASTICBEANSTALK) { // not required
		return nil
	}

	if m.ELASTICBEANSTALK != nil {
		if err := m.ELASTICBEANSTALK.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICBEANSTALK")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICBEANSTALK")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateELASTICSEARCH(formats strfmt.Registry) error {
	if swag.IsZero(m.ELASTICSEARCH) { // not required
		return nil
	}

	if m.ELASTICSEARCH != nil {
		if err := m.ELASTICSEARCH.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICSEARCH")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICSEARCH")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateELASTICTRANSCODER(formats strfmt.Registry) error {
	if swag.IsZero(m.ELASTICTRANSCODER) { // not required
		return nil
	}

	if m.ELASTICTRANSCODER != nil {
		if err := m.ELASTICTRANSCODER.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICTRANSCODER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICTRANSCODER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateELB(formats strfmt.Registry) error {
	if swag.IsZero(m.ELB) { // not required
		return nil
	}

	if m.ELB != nil {
		if err := m.ELB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEMR(formats strfmt.Registry) error {
	if swag.IsZero(m.EMR) { // not required
		return nil
	}

	if m.EMR != nil {
		if err := m.EMR.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EMR")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EMR")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateEVENTBRIDGE(formats strfmt.Registry) error {
	if swag.IsZero(m.EVENTBRIDGE) { // not required
		return nil
	}

	if m.EVENTBRIDGE != nil {
		if err := m.EVENTBRIDGE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EVENTBRIDGE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EVENTBRIDGE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateFIREHOSE(formats strfmt.Registry) error {
	if swag.IsZero(m.FIREHOSE) { // not required
		return nil
	}

	if m.FIREHOSE != nil {
		if err := m.FIREHOSE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FIREHOSE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FIREHOSE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateFSX(formats strfmt.Registry) error {
	if swag.IsZero(m.FSX) { // not required
		return nil
	}

	if m.FSX != nil {
		if err := m.FSX.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FSX")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FSX")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateGLUE(formats strfmt.Registry) error {
	if swag.IsZero(m.GLUE) { // not required
		return nil
	}

	if m.GLUE != nil {
		if err := m.GLUE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GLUE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GLUE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateKINESIS(formats strfmt.Registry) error {
	if swag.IsZero(m.KINESIS) { // not required
		return nil
	}

	if m.KINESIS != nil {
		if err := m.KINESIS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KINESIS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KINESIS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateKINESISVIDEO(formats strfmt.Registry) error {
	if swag.IsZero(m.KINESISVIDEO) { // not required
		return nil
	}

	if m.KINESISVIDEO != nil {
		if err := m.KINESISVIDEO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KINESISVIDEO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KINESISVIDEO")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateLAMBDA(formats strfmt.Registry) error {
	if swag.IsZero(m.LAMBDA) { // not required
		return nil
	}

	if m.LAMBDA != nil {
		if err := m.LAMBDA.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LAMBDA")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LAMBDA")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMEDIACONNECT(formats strfmt.Registry) error {
	if swag.IsZero(m.MEDIACONNECT) { // not required
		return nil
	}

	if m.MEDIACONNECT != nil {
		if err := m.MEDIACONNECT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIACONNECT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIACONNECT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMEDIACONVERT(formats strfmt.Registry) error {
	if swag.IsZero(m.MEDIACONVERT) { // not required
		return nil
	}

	if m.MEDIACONVERT != nil {
		if err := m.MEDIACONVERT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIACONVERT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIACONVERT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMEDIAPACKAGELIVE(formats strfmt.Registry) error {
	if swag.IsZero(m.MEDIAPACKAGELIVE) { // not required
		return nil
	}

	if m.MEDIAPACKAGELIVE != nil {
		if err := m.MEDIAPACKAGELIVE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIAPACKAGELIVE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIAPACKAGELIVE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMEDIAPACKAGEVOD(formats strfmt.Registry) error {
	if swag.IsZero(m.MEDIAPACKAGEVOD) { // not required
		return nil
	}

	if m.MEDIAPACKAGEVOD != nil {
		if err := m.MEDIAPACKAGEVOD.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIAPACKAGEVOD")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIAPACKAGEVOD")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMEDIASTORE(formats strfmt.Registry) error {
	if swag.IsZero(m.MEDIASTORE) { // not required
		return nil
	}

	if m.MEDIASTORE != nil {
		if err := m.MEDIASTORE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIASTORE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIASTORE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMEDIATAILOR(formats strfmt.Registry) error {
	if swag.IsZero(m.MEDIATAILOR) { // not required
		return nil
	}

	if m.MEDIATAILOR != nil {
		if err := m.MEDIATAILOR.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIATAILOR")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIATAILOR")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMQ(formats strfmt.Registry) error {
	if swag.IsZero(m.MQ) { // not required
		return nil
	}

	if m.MQ != nil {
		if err := m.MQ.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MQ")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MQ")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMSKBROKER(formats strfmt.Registry) error {
	if swag.IsZero(m.MSKBROKER) { // not required
		return nil
	}

	if m.MSKBROKER != nil {
		if err := m.MSKBROKER.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MSKBROKER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MSKBROKER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateMSKCLUSTER(formats strfmt.Registry) error {
	if swag.IsZero(m.MSKCLUSTER) { // not required
		return nil
	}

	if m.MSKCLUSTER != nil {
		if err := m.MSKCLUSTER.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MSKCLUSTER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MSKCLUSTER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateNATGATEWAY(formats strfmt.Registry) error {
	if swag.IsZero(m.NATGATEWAY) { // not required
		return nil
	}

	if m.NATGATEWAY != nil {
		if err := m.NATGATEWAY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NATGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NATGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateNETWORKELB(formats strfmt.Registry) error {
	if swag.IsZero(m.NETWORKELB) { // not required
		return nil
	}

	if m.NETWORKELB != nil {
		if err := m.NETWORKELB.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NETWORKELB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NETWORKELB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateOPSWORKS(formats strfmt.Registry) error {
	if swag.IsZero(m.OPSWORKS) { // not required
		return nil
	}

	if m.OPSWORKS != nil {
		if err := m.OPSWORKS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OPSWORKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OPSWORKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateRDS(formats strfmt.Registry) error {
	if swag.IsZero(m.RDS) { // not required
		return nil
	}

	if m.RDS != nil {
		if err := m.RDS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RDS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RDS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateREDSHIFT(formats strfmt.Registry) error {
	if swag.IsZero(m.REDSHIFT) { // not required
		return nil
	}

	if m.REDSHIFT != nil {
		if err := m.REDSHIFT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("REDSHIFT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("REDSHIFT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateROUTE53(formats strfmt.Registry) error {
	if swag.IsZero(m.ROUTE53) { // not required
		return nil
	}

	if m.ROUTE53 != nil {
		if err := m.ROUTE53.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ROUTE53")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ROUTE53")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateROUTE53RESOLVER(formats strfmt.Registry) error {
	if swag.IsZero(m.ROUTE53RESOLVER) { // not required
		return nil
	}

	if m.ROUTE53RESOLVER != nil {
		if err := m.ROUTE53RESOLVER.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ROUTE53RESOLVER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ROUTE53RESOLVER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateS3(formats strfmt.Registry) error {
	if swag.IsZero(m.S3) { // not required
		return nil
	}

	if m.S3 != nil {
		if err := m.S3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("S3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("S3")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSAGEMAKER(formats strfmt.Registry) error {
	if swag.IsZero(m.SAGEMAKER) { // not required
		return nil
	}

	if m.SAGEMAKER != nil {
		if err := m.SAGEMAKER.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SAGEMAKER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SAGEMAKER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSES(formats strfmt.Registry) error {
	if swag.IsZero(m.SES) { // not required
		return nil
	}

	if m.SES != nil {
		if err := m.SES.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSNS(formats strfmt.Registry) error {
	if swag.IsZero(m.SNS) { // not required
		return nil
	}

	if m.SNS != nil {
		if err := m.SNS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SNS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SNS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSQS(formats strfmt.Registry) error {
	if swag.IsZero(m.SQS) { // not required
		return nil
	}

	if m.SQS != nil {
		if err := m.SQS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SQS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SQS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSTEPFUNCTIONS(formats strfmt.Registry) error {
	if swag.IsZero(m.STEPFUNCTIONS) { // not required
		return nil
	}

	if m.STEPFUNCTIONS != nil {
		if err := m.STEPFUNCTIONS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("STEPFUNCTIONS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("STEPFUNCTIONS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSWFACTIVITY(formats strfmt.Registry) error {
	if swag.IsZero(m.SWFACTIVITY) { // not required
		return nil
	}

	if m.SWFACTIVITY != nil {
		if err := m.SWFACTIVITY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SWFACTIVITY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SWFACTIVITY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateSWFWORKFLOW(formats strfmt.Registry) error {
	if swag.IsZero(m.SWFWORKFLOW) { // not required
		return nil
	}

	if m.SWFWORKFLOW != nil {
		if err := m.SWFWORKFLOW.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SWFWORKFLOW")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SWFWORKFLOW")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateTRANSITGATEWAY(formats strfmt.Registry) error {
	if swag.IsZero(m.TRANSITGATEWAY) { // not required
		return nil
	}

	if m.TRANSITGATEWAY != nil {
		if err := m.TRANSITGATEWAY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TRANSITGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TRANSITGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateVPN(formats strfmt.Registry) error {
	if swag.IsZero(m.VPN) { // not required
		return nil
	}

	if m.VPN != nil {
		if err := m.VPN.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VPN")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VPN")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateWORKSPACE(formats strfmt.Registry) error {
	if swag.IsZero(m.WORKSPACE) { // not required
		return nil
	}

	if m.WORKSPACE != nil {
		if err := m.WORKSPACE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WORKSPACE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WORKSPACE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) validateWORKSPACEDIRECTORY(formats strfmt.Registry) error {
	if swag.IsZero(m.WORKSPACEDIRECTORY) { // not required
		return nil
	}

	if m.WORKSPACEDIRECTORY != nil {
		if err := m.WORKSPACEDIRECTORY.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WORKSPACEDIRECTORY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WORKSPACEDIRECTORY")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cloud services based on the context it is used
func (m *CloudServices) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPIGATEWAY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPPLICATIONELB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAPPSTREAM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateATHENA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAUTOSCALING(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCLOUDFRONT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCLOUDSEARCH(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCODEBUILD(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCOGNITO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDIRECTCONNECT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDMSREPLICATION(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDMSREPLICATIONTASKS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDOCDB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDYNAMODB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEBS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEC2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateECS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEFS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateELASTICACHE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateELASTICBEANSTALK(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateELASTICSEARCH(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateELASTICTRANSCODER(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateELB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEMR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEVENTBRIDGE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFIREHOSE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFSX(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGLUE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKINESIS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKINESISVIDEO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLAMBDA(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMEDIACONNECT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMEDIACONVERT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMEDIAPACKAGELIVE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMEDIAPACKAGEVOD(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMEDIASTORE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMEDIATAILOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMQ(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMSKBROKER(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMSKCLUSTER(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNATGATEWAY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNETWORKELB(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOPSWORKS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRDS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateREDSHIFT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateROUTE53(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateROUTE53RESOLVER(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSAGEMAKER(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSES(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSNS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSTEPFUNCTIONS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSWFACTIVITY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSWFWORKFLOW(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTRANSITGATEWAY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVPN(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWORKSPACE(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWORKSPACEDIRECTORY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudServices) contextValidateAPIGATEWAY(ctx context.Context, formats strfmt.Registry) error {

	if m.APIGATEWAY != nil {
		if err := m.APIGATEWAY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APIGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APIGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAPPLICATIONELB(ctx context.Context, formats strfmt.Registry) error {

	if m.APPLICATIONELB != nil {
		if err := m.APPLICATIONELB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPLICATIONELB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPLICATIONELB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAPPSTREAM(ctx context.Context, formats strfmt.Registry) error {

	if m.APPSTREAM != nil {
		if err := m.APPSTREAM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("APPSTREAM")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("APPSTREAM")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateATHENA(ctx context.Context, formats strfmt.Registry) error {

	if m.ATHENA != nil {
		if err := m.ATHENA.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ATHENA")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ATHENA")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateAUTOSCALING(ctx context.Context, formats strfmt.Registry) error {

	if m.AUTOSCALING != nil {
		if err := m.AUTOSCALING.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AUTOSCALING")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AUTOSCALING")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCLOUDFRONT(ctx context.Context, formats strfmt.Registry) error {

	if m.CLOUDFRONT != nil {
		if err := m.CLOUDFRONT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CLOUDFRONT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CLOUDFRONT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCLOUDSEARCH(ctx context.Context, formats strfmt.Registry) error {

	if m.CLOUDSEARCH != nil {
		if err := m.CLOUDSEARCH.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CLOUDSEARCH")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CLOUDSEARCH")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCODEBUILD(ctx context.Context, formats strfmt.Registry) error {

	if m.CODEBUILD != nil {
		if err := m.CODEBUILD.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CODEBUILD")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CODEBUILD")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateCOGNITO(ctx context.Context, formats strfmt.Registry) error {

	if m.COGNITO != nil {
		if err := m.COGNITO.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("COGNITO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("COGNITO")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDIRECTCONNECT(ctx context.Context, formats strfmt.Registry) error {

	if m.DIRECTCONNECT != nil {
		if err := m.DIRECTCONNECT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DIRECTCONNECT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DIRECTCONNECT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDMSREPLICATION(ctx context.Context, formats strfmt.Registry) error {

	if m.DMSREPLICATION != nil {
		if err := m.DMSREPLICATION.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DMSREPLICATION")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DMSREPLICATION")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDMSREPLICATIONTASKS(ctx context.Context, formats strfmt.Registry) error {

	if m.DMSREPLICATIONTASKS != nil {
		if err := m.DMSREPLICATIONTASKS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DMSREPLICATIONTASKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DMSREPLICATIONTASKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDOCDB(ctx context.Context, formats strfmt.Registry) error {

	if m.DOCDB != nil {
		if err := m.DOCDB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DOCDB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DOCDB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateDYNAMODB(ctx context.Context, formats strfmt.Registry) error {

	if m.DYNAMODB != nil {
		if err := m.DYNAMODB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DYNAMODB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DYNAMODB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEBS(ctx context.Context, formats strfmt.Registry) error {

	if m.EBS != nil {
		if err := m.EBS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EBS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EBS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEC2(ctx context.Context, formats strfmt.Registry) error {

	if m.EC2 != nil {
		if err := m.EC2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EC2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EC2")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateECS(ctx context.Context, formats strfmt.Registry) error {

	if m.ECS != nil {
		if err := m.ECS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ECS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ECS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEFS(ctx context.Context, formats strfmt.Registry) error {

	if m.EFS != nil {
		if err := m.EFS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EFS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EFS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateELASTICACHE(ctx context.Context, formats strfmt.Registry) error {

	if m.ELASTICACHE != nil {
		if err := m.ELASTICACHE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICACHE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICACHE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateELASTICBEANSTALK(ctx context.Context, formats strfmt.Registry) error {

	if m.ELASTICBEANSTALK != nil {
		if err := m.ELASTICBEANSTALK.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICBEANSTALK")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICBEANSTALK")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateELASTICSEARCH(ctx context.Context, formats strfmt.Registry) error {

	if m.ELASTICSEARCH != nil {
		if err := m.ELASTICSEARCH.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICSEARCH")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICSEARCH")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateELASTICTRANSCODER(ctx context.Context, formats strfmt.Registry) error {

	if m.ELASTICTRANSCODER != nil {
		if err := m.ELASTICTRANSCODER.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELASTICTRANSCODER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELASTICTRANSCODER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateELB(ctx context.Context, formats strfmt.Registry) error {

	if m.ELB != nil {
		if err := m.ELB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ELB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ELB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEMR(ctx context.Context, formats strfmt.Registry) error {

	if m.EMR != nil {
		if err := m.EMR.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EMR")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EMR")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateEVENTBRIDGE(ctx context.Context, formats strfmt.Registry) error {

	if m.EVENTBRIDGE != nil {
		if err := m.EVENTBRIDGE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EVENTBRIDGE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EVENTBRIDGE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateFIREHOSE(ctx context.Context, formats strfmt.Registry) error {

	if m.FIREHOSE != nil {
		if err := m.FIREHOSE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FIREHOSE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FIREHOSE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateFSX(ctx context.Context, formats strfmt.Registry) error {

	if m.FSX != nil {
		if err := m.FSX.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FSX")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FSX")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateGLUE(ctx context.Context, formats strfmt.Registry) error {

	if m.GLUE != nil {
		if err := m.GLUE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GLUE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GLUE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateKINESIS(ctx context.Context, formats strfmt.Registry) error {

	if m.KINESIS != nil {
		if err := m.KINESIS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KINESIS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KINESIS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateKINESISVIDEO(ctx context.Context, formats strfmt.Registry) error {

	if m.KINESISVIDEO != nil {
		if err := m.KINESISVIDEO.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KINESISVIDEO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KINESISVIDEO")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateLAMBDA(ctx context.Context, formats strfmt.Registry) error {

	if m.LAMBDA != nil {
		if err := m.LAMBDA.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LAMBDA")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LAMBDA")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMEDIACONNECT(ctx context.Context, formats strfmt.Registry) error {

	if m.MEDIACONNECT != nil {
		if err := m.MEDIACONNECT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIACONNECT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIACONNECT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMEDIACONVERT(ctx context.Context, formats strfmt.Registry) error {

	if m.MEDIACONVERT != nil {
		if err := m.MEDIACONVERT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIACONVERT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIACONVERT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMEDIAPACKAGELIVE(ctx context.Context, formats strfmt.Registry) error {

	if m.MEDIAPACKAGELIVE != nil {
		if err := m.MEDIAPACKAGELIVE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIAPACKAGELIVE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIAPACKAGELIVE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMEDIAPACKAGEVOD(ctx context.Context, formats strfmt.Registry) error {

	if m.MEDIAPACKAGEVOD != nil {
		if err := m.MEDIAPACKAGEVOD.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIAPACKAGEVOD")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIAPACKAGEVOD")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMEDIASTORE(ctx context.Context, formats strfmt.Registry) error {

	if m.MEDIASTORE != nil {
		if err := m.MEDIASTORE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIASTORE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIASTORE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMEDIATAILOR(ctx context.Context, formats strfmt.Registry) error {

	if m.MEDIATAILOR != nil {
		if err := m.MEDIATAILOR.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MEDIATAILOR")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MEDIATAILOR")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMQ(ctx context.Context, formats strfmt.Registry) error {

	if m.MQ != nil {
		if err := m.MQ.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MQ")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MQ")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMSKBROKER(ctx context.Context, formats strfmt.Registry) error {

	if m.MSKBROKER != nil {
		if err := m.MSKBROKER.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MSKBROKER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MSKBROKER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateMSKCLUSTER(ctx context.Context, formats strfmt.Registry) error {

	if m.MSKCLUSTER != nil {
		if err := m.MSKCLUSTER.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MSKCLUSTER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MSKCLUSTER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateNATGATEWAY(ctx context.Context, formats strfmt.Registry) error {

	if m.NATGATEWAY != nil {
		if err := m.NATGATEWAY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NATGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NATGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateNETWORKELB(ctx context.Context, formats strfmt.Registry) error {

	if m.NETWORKELB != nil {
		if err := m.NETWORKELB.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NETWORKELB")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NETWORKELB")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateOPSWORKS(ctx context.Context, formats strfmt.Registry) error {

	if m.OPSWORKS != nil {
		if err := m.OPSWORKS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OPSWORKS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OPSWORKS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateRDS(ctx context.Context, formats strfmt.Registry) error {

	if m.RDS != nil {
		if err := m.RDS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RDS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RDS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateREDSHIFT(ctx context.Context, formats strfmt.Registry) error {

	if m.REDSHIFT != nil {
		if err := m.REDSHIFT.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("REDSHIFT")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("REDSHIFT")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateROUTE53(ctx context.Context, formats strfmt.Registry) error {

	if m.ROUTE53 != nil {
		if err := m.ROUTE53.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ROUTE53")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ROUTE53")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateROUTE53RESOLVER(ctx context.Context, formats strfmt.Registry) error {

	if m.ROUTE53RESOLVER != nil {
		if err := m.ROUTE53RESOLVER.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ROUTE53RESOLVER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ROUTE53RESOLVER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateS3(ctx context.Context, formats strfmt.Registry) error {

	if m.S3 != nil {
		if err := m.S3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("S3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("S3")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSAGEMAKER(ctx context.Context, formats strfmt.Registry) error {

	if m.SAGEMAKER != nil {
		if err := m.SAGEMAKER.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SAGEMAKER")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SAGEMAKER")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSES(ctx context.Context, formats strfmt.Registry) error {

	if m.SES != nil {
		if err := m.SES.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SES")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SES")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSNS(ctx context.Context, formats strfmt.Registry) error {

	if m.SNS != nil {
		if err := m.SNS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SNS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SNS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSQS(ctx context.Context, formats strfmt.Registry) error {

	if m.SQS != nil {
		if err := m.SQS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SQS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SQS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSTEPFUNCTIONS(ctx context.Context, formats strfmt.Registry) error {

	if m.STEPFUNCTIONS != nil {
		if err := m.STEPFUNCTIONS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("STEPFUNCTIONS")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("STEPFUNCTIONS")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSWFACTIVITY(ctx context.Context, formats strfmt.Registry) error {

	if m.SWFACTIVITY != nil {
		if err := m.SWFACTIVITY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SWFACTIVITY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SWFACTIVITY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateSWFWORKFLOW(ctx context.Context, formats strfmt.Registry) error {

	if m.SWFWORKFLOW != nil {
		if err := m.SWFWORKFLOW.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SWFWORKFLOW")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SWFWORKFLOW")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateTRANSITGATEWAY(ctx context.Context, formats strfmt.Registry) error {

	if m.TRANSITGATEWAY != nil {
		if err := m.TRANSITGATEWAY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TRANSITGATEWAY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TRANSITGATEWAY")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateVPN(ctx context.Context, formats strfmt.Registry) error {

	if m.VPN != nil {
		if err := m.VPN.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("VPN")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("VPN")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateWORKSPACE(ctx context.Context, formats strfmt.Registry) error {

	if m.WORKSPACE != nil {
		if err := m.WORKSPACE.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WORKSPACE")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WORKSPACE")
			}
			return err
		}
	}

	return nil
}

func (m *CloudServices) contextValidateWORKSPACEDIRECTORY(ctx context.Context, formats strfmt.Registry) error {

	if m.WORKSPACEDIRECTORY != nil {
		if err := m.WORKSPACEDIRECTORY.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WORKSPACEDIRECTORY")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WORKSPACEDIRECTORY")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudServices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudServices) UnmarshalBinary(b []byte) error {
	var res CloudServices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
