// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollectorGroup collector group
// Example: isResource
//
// swagger:model CollectorGroup
type CollectorGroup struct {

	// Denotes whether or not the collector group should be auto balanced
	// Example: true
	AutoBalance bool `json:"autoBalance,omitempty"`

	// Threshold for instance count strategy to check if a collector has high load
	// Example: 10000
	AutoBalanceInstanceCountThreshold int32 `json:"autoBalanceInstanceCountThreshold"`

	// The auto balance strategy. Typically left blank or set to 'none'.
	// Example: none
	AutoBalanceStrategy string `json:"autoBalanceStrategy,omitempty"`

	// The time at which the group was created, in epoch format
	// Read Only: true
	CreateOn int64 `json:"createOn,omitempty"`

	// The custom properties defined for the Collector group
	CustomProperties []*NameAndValue `json:"customProperties,omitempty"`

	// The description of the Collector Group
	// Example: Group for collectors dedicated to Network Devices
	Description string `json:"description,omitempty"`

	// The status of the highest priority sub collector
	// Read Only: true
	HighestPriorityCollectorStatus *RestHighestPriorityCollectorStatus `json:"highestPriorityCollectorStatus,omitempty"`

	// The id of the Collector Group
	// Read Only: true
	ID int32 `json:"id,omitempty"`

	// The name of the Collector Group
	// Example: Collector_Group_(Network Devices)
	// Required: true
	Name *string `json:"name"`

	// The number of Collectors that belong to the group
	// Read Only: true
	NumOfCollectors int32 `json:"numOfCollectors,omitempty"`

	// The permission level of the user that made the API request
	// Read Only: true
	UserPermission string `json:"userPermission,omitempty"`
}

// Validate validates this collector group
func (m *CollectorGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighestPriorityCollectorStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectorGroup) validateCustomProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomProperties) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomProperties); i++ {
		if swag.IsZero(m.CustomProperties[i]) { // not required
			continue
		}

		if m.CustomProperties[i] != nil {
			if err := m.CustomProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CollectorGroup) validateHighestPriorityCollectorStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HighestPriorityCollectorStatus) { // not required
		return nil
	}

	if m.HighestPriorityCollectorStatus != nil {
		if err := m.HighestPriorityCollectorStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("highestPriorityCollectorStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("highestPriorityCollectorStatus")
			}
			return err
		}
	}

	return nil
}

func (m *CollectorGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this collector group based on the context it is used
func (m *CollectorGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreateOn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHighestPriorityCollectorStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumOfCollectors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserPermission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectorGroup) contextValidateCreateOn(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createOn", "body", int64(m.CreateOn)); err != nil {
		return err
	}

	return nil
}

func (m *CollectorGroup) contextValidateCustomProperties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomProperties); i++ {

		if m.CustomProperties[i] != nil {
			if err := m.CustomProperties[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("customProperties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("customProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CollectorGroup) contextValidateHighestPriorityCollectorStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.HighestPriorityCollectorStatus != nil {
		if err := m.HighestPriorityCollectorStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("highestPriorityCollectorStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("highestPriorityCollectorStatus")
			}
			return err
		}
	}

	return nil
}

func (m *CollectorGroup) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int32(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *CollectorGroup) contextValidateNumOfCollectors(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numOfCollectors", "body", int32(m.NumOfCollectors)); err != nil {
		return err
	}

	return nil
}

func (m *CollectorGroup) contextValidateUserPermission(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "userPermission", "body", string(m.UserPermission)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CollectorGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectorGroup) UnmarshalBinary(b []byte) error {
	var res CollectorGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
