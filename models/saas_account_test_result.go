// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SaasAccountTestResult saas account test result
//
// swagger:model SaasAccountTestResult
type SaasAccountTestResult struct {

	// detail link
	DetailLink string `json:"detailLink,omitempty"`

	// invalid status urls
	InvalidStatusUrls string `json:"invalidStatusUrls,omitempty"`

	// no permission apis
	// Unique: true
	NoPermissionApis []string `json:"noPermissionApis"`

	// no permission service
	NoPermissionService string `json:"noPermissionService,omitempty"`

	// non permission apis errors
	// Unique: true
	NonPermissionApisErrors []string `json:"nonPermissionApisErrors"`

	// result code
	ResultCode int32 `json:"resultCode,omitempty"`
}

// Validate validates this saas account test result
func (m *SaasAccountTestResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNoPermissionApis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonPermissionApisErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SaasAccountTestResult) validateNoPermissionApis(formats strfmt.Registry) error {
	if swag.IsZero(m.NoPermissionApis) { // not required
		return nil
	}

	if err := validate.UniqueItems("noPermissionApis", "body", m.NoPermissionApis); err != nil {
		return err
	}

	return nil
}

func (m *SaasAccountTestResult) validateNonPermissionApisErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.NonPermissionApisErrors) { // not required
		return nil
	}

	if err := validate.UniqueItems("nonPermissionApisErrors", "body", m.NonPermissionApisErrors); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this saas account test result based on context it is used
func (m *SaasAccountTestResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SaasAccountTestResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SaasAccountTestResult) UnmarshalBinary(b []byte) error {
	var res SaasAccountTestResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
